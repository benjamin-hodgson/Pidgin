{
  "Pidgin.Comment.CommentParser.html": {
    "href": "Pidgin.Comment.CommentParser.html",
    "title": "Class CommentParser | Pidgin",
    "keywords": "Class CommentParser Contains functions to build parsers which skip over comments. Inheritance object CommentParser Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class CommentParser Methods SkipBlockComment<T, U>(Parser<char, T>, Parser<char, U>) Creates a parser which runs blockCommentStart, then skips everything until blockCommentEnd. Declaration public static Parser<char, Unit> SkipBlockComment<T, U>(Parser<char, T> blockCommentStart, Parser<char, U> blockCommentEnd) Parameters Type Name Description Parser<char, T> blockCommentStart A parser to recognise a lexeme which starts a multi-line block comment. Parser<char, U> blockCommentEnd A parser to recognise a lexeme which ends a multi-line block comment. Returns Type Description Parser<char, Unit> A parser which runs blockCommentStart, then skips everything until blockCommentEnd. Type Parameters Name Description T The return type of the blockCommentStart parser. U The return type of the blockCommentEnd parser. SkipLineComment<T>(Parser<char, T>) Creates a parser which runs lineCommentStart, then skips the rest of the line. Declaration public static Parser<char, Unit> SkipLineComment<T>(Parser<char, T> lineCommentStart) Parameters Type Name Description Parser<char, T> lineCommentStart A parser to recognise a lexeme which starts a line comment. Returns Type Description Parser<char, Unit> A parser which runs lineCommentStart, then skips the rest of the line. Type Parameters Name Description T The return type of the lineCommentStart parser. SkipNestedBlockComment<T, U>(Parser<char, T>, Parser<char, U>) Creates a parser which runs blockCommentStart, then skips everything until blockCommentEnd, accounting for nested comments. Declaration public static Parser<char, Unit> SkipNestedBlockComment<T, U>(Parser<char, T> blockCommentStart, Parser<char, U> blockCommentEnd) Parameters Type Name Description Parser<char, T> blockCommentStart A parser to recognise a lexeme which starts a multi-line block comment. Parser<char, U> blockCommentEnd A parser to recognise a lexeme which ends a multi-line block comment. Returns Type Description Parser<char, Unit> A parser which runs blockCommentStart, then skips everything until blockCommentEnd, accounting for nested comments. Type Parameters Name Description T The return type of the blockCommentStart parser. U The return type of the blockCommentEnd parser."
  },
  "Pidgin.Comment.html": {
    "href": "Pidgin.Comment.html",
    "title": "Namespace Pidgin.Comment | Pidgin",
    "keywords": "Namespace Pidgin.Comment Classes CommentParser Contains functions to build parsers which skip over comments."
  },
  "Pidgin.Configuration.CharDefaultConfiguration.html": {
    "href": "Pidgin.Configuration.CharDefaultConfiguration.html",
    "title": "Class CharDefaultConfiguration | Pidgin",
    "keywords": "Class CharDefaultConfiguration A default configuration for textual input. Inheritance object DefaultConfiguration<char> CharDefaultConfiguration Implements IConfiguration<char> Inherited Members DefaultConfiguration<char>.ArrayPoolProvider object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class CharDefaultConfiguration : DefaultConfiguration<char>, IConfiguration<char> Constructors CharDefaultConfiguration() A default configuration for textual input. Declaration public CharDefaultConfiguration() Properties Instance The shared global instance of CharDefaultConfiguration. Declaration public static IConfiguration<char> Instance { get; } Property Value Type Description IConfiguration<char> SourcePosCalculator Handles newlines and tab stops. Declaration public override Func<char, SourcePosDelta> SourcePosCalculator { get; } Property Value Type Description Func<char, SourcePosDelta> Overrides DefaultConfiguration<char>.SourcePosCalculator Implements IConfiguration<TToken> Extension Methods Configuration.WithArrayPoolProvider<TToken>(IConfiguration<TToken>, IArrayPoolProvider) Configuration.WithPosCalculator<TToken>(IConfiguration<TToken>, Func<TToken, SourcePosDelta>)"
  },
  "Pidgin.Configuration.Configuration.html": {
    "href": "Pidgin.Configuration.Configuration.html",
    "title": "Class Configuration | Pidgin",
    "keywords": "Class Configuration Methods for creating and updating IConfiguration<TToken>s. Inheritance object Configuration Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class Configuration Methods Default<TToken>() Returns the default configuration for the token type TToken. Declaration public static IConfiguration<TToken> Default<TToken>() Returns Type Description IConfiguration<TToken> The default configuration for the token type TToken. Type Parameters Name Description TToken The token type. WithArrayPoolProvider<TToken>(IConfiguration<TToken>, IArrayPoolProvider) Override the ArrayPoolProvider. Declaration public static IConfiguration<TToken> WithArrayPoolProvider<TToken>(this IConfiguration<TToken> configuration, IArrayPoolProvider arrayPoolProvider) Parameters Type Name Description IConfiguration<TToken> configuration The configuration. IArrayPoolProvider arrayPoolProvider The new ArrayPoolProvider. Returns Type Description IConfiguration<TToken> A copy of configuration with its ArrayPoolProvider overridden. Type Parameters Name Description TToken The token type. WithPosCalculator<TToken>(IConfiguration<TToken>, Func<TToken, SourcePosDelta>) Override the SourcePosCalculator. Declaration public static IConfiguration<TToken> WithPosCalculator<TToken>(this IConfiguration<TToken> configuration, Func<TToken, SourcePosDelta> posCalculator) Parameters Type Name Description IConfiguration<TToken> configuration The configuration. Func<TToken, SourcePosDelta> posCalculator The new SourcePosCalculator. Returns Type Description IConfiguration<TToken> A copy of configuration with its SourcePosCalculator overridden. Type Parameters Name Description TToken The token type."
  },
  "Pidgin.Configuration.DefaultArrayPoolProvider.html": {
    "href": "Pidgin.Configuration.DefaultArrayPoolProvider.html",
    "title": "Class DefaultArrayPoolProvider | Pidgin",
    "keywords": "Class DefaultArrayPoolProvider Always returns Shared. Inheritance object DefaultArrayPoolProvider Implements IArrayPoolProvider Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class DefaultArrayPoolProvider : IArrayPoolProvider Properties Instance The shared global instance of DefaultArrayPoolProvider. Declaration public static IArrayPoolProvider Instance { get; } Property Value Type Description IArrayPoolProvider Methods GetArrayPool<T>() Always returns Shared. Declaration public ArrayPool<T> GetArrayPool<T>() Returns Type Description ArrayPool<T> Shared. Type Parameters Name Description T The type of elements in the array pool. Implements IArrayPoolProvider"
  },
  "Pidgin.Configuration.DefaultConfiguration-1.html": {
    "href": "Pidgin.Configuration.DefaultConfiguration-1.html",
    "title": "Class DefaultConfiguration<TToken> | Pidgin",
    "keywords": "Class DefaultConfiguration<TToken> A default configuration for any token type. Inheritance object DefaultConfiguration<TToken> CharDefaultConfiguration Implements IConfiguration<TToken> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class DefaultConfiguration<TToken> : IConfiguration<TToken> Type Parameters Name Description TToken The token type. Constructors DefaultConfiguration() A default configuration for any token type. Declaration public DefaultConfiguration() Properties ArrayPoolProvider Always returns Instance. Declaration public virtual IArrayPoolProvider ArrayPoolProvider { get; } Property Value Type Description IArrayPoolProvider Instance The shared global instance of DefaultConfiguration<TToken>. Declaration public static IConfiguration<TToken> Instance { get; } Property Value Type Description IConfiguration<TToken> SourcePosCalculator Always increments the column by 1. Declaration public virtual Func<TToken, SourcePosDelta> SourcePosCalculator { get; } Property Value Type Description Func<TToken, SourcePosDelta> Implements IConfiguration<TToken> Extension Methods Configuration.WithArrayPoolProvider<TToken>(IConfiguration<TToken>, IArrayPoolProvider) Configuration.WithPosCalculator<TToken>(IConfiguration<TToken>, Func<TToken, SourcePosDelta>)"
  },
  "Pidgin.Configuration.IArrayPoolProvider.html": {
    "href": "Pidgin.Configuration.IArrayPoolProvider.html",
    "title": "Interface IArrayPoolProvider | Pidgin",
    "keywords": "Interface IArrayPoolProvider An object which can get ArrayPool<T> instances for an arbitrary type. Declaration public interface IArrayPoolProvider Methods GetArrayPool<T>() Gets an ArrayPool<T> instance for elements of type T. Declaration ArrayPool<T> GetArrayPool<T>() Returns Type Description ArrayPool<T> An ArrayPool<T> instance for elements of type T. Type Parameters Name Description T The type of elements in the array pool."
  },
  "Pidgin.Configuration.IConfiguration-1.html": {
    "href": "Pidgin.Configuration.IConfiguration-1.html",
    "title": "Interface IConfiguration<TToken> | Pidgin",
    "keywords": "Interface IConfiguration<TToken> Represents a parser configuration. Declaration public interface IConfiguration<TToken> Type Parameters Name Description TToken The type of tokens. Properties ArrayPoolProvider The IArrayPoolProvider. Declaration IArrayPoolProvider ArrayPoolProvider { get; } Property Value Type Description IArrayPoolProvider SourcePosCalculator A function which can compute a SourcePosDelta representing the change in position from consuming a token. Declaration Func<TToken, SourcePosDelta> SourcePosCalculator { get; } Property Value Type Description Func<TToken, SourcePosDelta> Extension Methods Configuration.WithArrayPoolProvider<TToken>(IConfiguration<TToken>, IArrayPoolProvider) Configuration.WithPosCalculator<TToken>(IConfiguration<TToken>, Func<TToken, SourcePosDelta>)"
  },
  "Pidgin.Configuration.html": {
    "href": "Pidgin.Configuration.html",
    "title": "Namespace Pidgin.Configuration | Pidgin",
    "keywords": "Namespace Pidgin.Configuration Classes CharDefaultConfiguration A default configuration for textual input. Configuration Methods for creating and updating IConfiguration<TToken>s. DefaultArrayPoolProvider Always returns Shared. DefaultConfiguration<TToken> A default configuration for any token type. Interfaces IArrayPoolProvider An object which can get ArrayPool<T> instances for an arbitrary type. IConfiguration<TToken> Represents a parser configuration."
  },
  "Pidgin.Expected-1.html": {
    "href": "Pidgin.Expected-1.html",
    "title": "Struct Expected<TToken> | Pidgin",
    "keywords": "Struct Expected<TToken> Represents a parsing expectation for error reporting. Expected values are either a sequence of expected tokens (in which case Label == null && Tokens != null), a custom-named parser (Label != null && Tokens == null), or the end of the input stream (Label == null && Tokens == null). Implements IEquatable<Expected<TToken>> IComparable<Expected<TToken>> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public readonly struct Expected<TToken> : IEquatable<Expected<TToken>>, IComparable<Expected<TToken>> Type Parameters Name Description TToken The type of tokens in the parser's input stream. Properties IsEof Did the parser expect the end of the input stream?. Declaration public bool IsEof { get; } Property Value Type Description bool True if the parser expected the end of the input stream. Label The custom name of the parser that produced this error, or null if the expectation was a sequence of tokens. Declaration public string? Label { get; } Property Value Type Description string The label. Tokens The sequence of tokens that were expected at the point of the error, null if the parser had a custom name. Declaration public ImmutableArray<TToken> Tokens { get; } Property Value Type Description ImmutableArray<TToken> The sequence of tokens that were expected. Methods CompareTo(Expected<TToken>) Represents a parsing expectation for error reporting. Expected values are either a sequence of expected tokens (in which case Label == null && Tokens != null), a custom-named parser (Label != null && Tokens == null), or the end of the input stream (Label == null && Tokens == null). Declaration public int CompareTo(Expected<TToken> other) Parameters Type Name Description Expected<TToken> other Returns Type Description int Equals(Expected<TToken>) Represents a parsing expectation for error reporting. Expected values are either a sequence of expected tokens (in which case Label == null && Tokens != null), a custom-named parser (Label != null && Tokens == null), or the end of the input stream (Label == null && Tokens == null). Declaration public bool Equals(Expected<TToken> other) Parameters Type Name Description Expected<TToken> other Returns Type Description bool Equals(object?) Represents a parsing expectation for error reporting. Expected values are either a sequence of expected tokens (in which case Label == null && Tokens != null), a custom-named parser (Label != null && Tokens == null), or the end of the input stream (Label == null && Tokens == null). Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Represents a parsing expectation for error reporting. Expected values are either a sequence of expected tokens (in which case Label == null && Tokens != null), a custom-named parser (Label != null && Tokens == null), or the end of the input stream (Label == null && Tokens == null). Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToString() Represents a parsing expectation for error reporting. Expected values are either a sequence of expected tokens (in which case Label == null && Tokens != null), a custom-named parser (Label != null && Tokens == null), or the end of the input stream (Label == null && Tokens == null). Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator ==(Expected<TToken>, Expected<TToken>) Equality operator. Declaration public static bool operator ==(Expected<TToken> left, Expected<TToken> right) Parameters Type Name Description Expected<TToken> left The left Expected<TToken>. Expected<TToken> right The right Expected<TToken>. Returns Type Description bool operator >(Expected<TToken>, Expected<TToken>) Comparison operator. Declaration public static bool operator >(Expected<TToken> left, Expected<TToken> right) Parameters Type Name Description Expected<TToken> left The left Expected<TToken>. Expected<TToken> right The right Expected<TToken>. Returns Type Description bool operator >=(Expected<TToken>, Expected<TToken>) Comparison operator. Declaration public static bool operator >=(Expected<TToken> left, Expected<TToken> right) Parameters Type Name Description Expected<TToken> left The left Expected<TToken>. Expected<TToken> right The right Expected<TToken>. Returns Type Description bool operator !=(Expected<TToken>, Expected<TToken>) Inequality operator. Declaration public static bool operator !=(Expected<TToken> left, Expected<TToken> right) Parameters Type Name Description Expected<TToken> left The left Expected<TToken>. Expected<TToken> right The right Expected<TToken>. Returns Type Description bool operator <(Expected<TToken>, Expected<TToken>) Comparison operator. Declaration public static bool operator <(Expected<TToken> left, Expected<TToken> right) Parameters Type Name Description Expected<TToken> left The left Expected<TToken>. Expected<TToken> right The right Expected<TToken>. Returns Type Description bool operator <=(Expected<TToken>, Expected<TToken>) Comparison operator. Declaration public static bool operator <=(Expected<TToken> left, Expected<TToken> right) Parameters Type Name Description Expected<TToken> left The left Expected<TToken>. Expected<TToken> right The right Expected<TToken>. Returns Type Description bool Implements IEquatable<T> IComparable<T>"
  },
  "Pidgin.Expression.BinaryOperatorType.html": {
    "href": "Pidgin.Expression.BinaryOperatorType.html",
    "title": "Enum BinaryOperatorType | Pidgin",
    "keywords": "Enum BinaryOperatorType The associativity of the binary operator: left-associative, right-associative, or non-associative. Declaration public enum BinaryOperatorType Fields Name Description LeftAssociative Denotes a left-associative binary operator NonAssociative Denotes a non-associative binary operator RightAssociative Denotes a right-associative binary operator"
  },
  "Pidgin.Expression.ExpressionParser.html": {
    "href": "Pidgin.Expression.ExpressionParser.html",
    "title": "Class ExpressionParser | Pidgin",
    "keywords": "Class ExpressionParser Contains tools for parsing expression languages with associative infix operators. To get started, write a Parser<TToken, T>, to parse an atomic term in your expression language, and use the Operator class to create a table of operator parsers in order of their precedence. Then call one of the Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) overloads to compile the table of operators into a Parser<TToken, T>. Inheritance object ExpressionParser Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class ExpressionParser Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Examples Here is an example of a parser for mathematical expressions. The parser computes the result of the expression (although in practice your parser would probably return an AST). var operators = new[] { Operator.Prefix(Char('-').ThenReturn<Func<int, int>>(x => -x)), Operator.InfixL(Char('*').ThenReturn<Func<int, int, int>>((x, y) => x * y)), Operator.InfixL(Char('+').ThenReturn<Func<int, int, int>>((x, y) => x + y)) }; var parser = ExpressionParser.Build( expr => Num.Or(expr.Between(Char('('), Char(')'))), operators ); Console.WriteLine(parser.ParseOrThrow(\"-3*(370+9)*37\")); // Output: // -42069 Methods Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) Builds a parser for expressions built from the operators in operatorTable. operatorTable is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. Declaration public static Parser<TToken, T> Build<TToken, T>(Parser<TToken, T> term, IEnumerable<OperatorTableRow<TToken, T>> operatorTable) Parameters Type Name Description Parser<TToken, T> term A parser for a single term in an expression language. IEnumerable<OperatorTableRow<TToken, T>> operatorTable A table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in operatorTable. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Build<TToken, T>(Parser<TToken, T>, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>>) Builds a parser for expressions built from the operators in operatorTable. operatorTable is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. Declaration public static Parser<TToken, T> Build<TToken, T>(Parser<TToken, T> term, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>> operatorTable) Parameters Type Name Description Parser<TToken, T> term A parser for a single term in an expression language. IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>> operatorTable A table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in operatorTable. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Build<TToken, T>(Parser<TToken, T>, Func<Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>>) Builds a parser for expressions built from the operators in operatorTableFactory's result. The operator table is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. This overload is useful for recursive expressions (for example, languages with parenthesised subexpressions). operatorTableFactory's argument will be a parser which parses a full subexpression. Declaration public static Parser<TToken, T> Build<TToken, T>(Parser<TToken, T> term, Func<Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>> operatorTableFactory) Parameters Type Name Description Parser<TToken, T> term A parser for a single term in an expression language. Func<Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>> operatorTableFactory A function which produces a table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in the operator table. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Build<TToken, T>(Parser<TToken, T>, Func<Parser<TToken, T>, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>>>) Builds a parser for expressions built from the operators in operatorTableFactory's result. The operator table is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. This overload is useful for recursive expressions (for example, languages with parenthesised subexpressions). operatorTableFactory's argument will be a parser which parses a full subexpression. Declaration public static Parser<TToken, T> Build<TToken, T>(Parser<TToken, T> term, Func<Parser<TToken, T>, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>>> operatorTableFactory) Parameters Type Name Description Parser<TToken, T> term A parser for a single term in an expression language. Func<Parser<TToken, T>, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>>> operatorTableFactory A function which produces a table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in the operator table. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Build<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>>, IEnumerable<OperatorTableRow<TToken, T>>) Builds a parser for expressions built from the operators in operatorTable. The operator table is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. This overload is useful for recursive expressions (for example, languages with parenthesised subexpressions). termFactory's argument will be a parser which parses a full subexpression. Declaration public static Parser<TToken, T> Build<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>> termFactory, IEnumerable<OperatorTableRow<TToken, T>> operatorTable) Parameters Type Name Description Func<Parser<TToken, T>, Parser<TToken, T>> termFactory A function which produces a parser for a single term. IEnumerable<OperatorTableRow<TToken, T>> operatorTable A table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in operatorTable. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Build<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>>, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>>) Builds a parser for expressions built from the operators in operatorTable. The operator table is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. This overload is useful for recursive expressions (for example, languages with parenthesised subexpressions). termFactory's argument will be a parser which parses a full subexpression. Declaration public static Parser<TToken, T> Build<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>> termFactory, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>> operatorTable) Parameters Type Name Description Func<Parser<TToken, T>, Parser<TToken, T>> termFactory A function which produces a parser for a single term. IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>> operatorTable A table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in operatorTable. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Build<TToken, T>(Func<Parser<TToken, T>, (Parser<TToken, T> term, IEnumerable<OperatorTableRow<TToken, T>> operatorTable)>) Builds a parser for expressions built from the operators in termAndOperatorTableFactory's second result. The operator table is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. This overload is useful for recursive expressions (for example, languages with parenthesised subexpressions). termAndOperatorTableFactory's argument will be a parser which parses a full subexpression. Declaration public static Parser<TToken, T> Build<TToken, T>(Func<Parser<TToken, T>, (Parser<TToken, T> term, IEnumerable<OperatorTableRow<TToken, T>> operatorTable)> termAndOperatorTableFactory) Parameters Type Name Description Func<Parser<TToken, T>, (Parser<TToken, T> term, IEnumerable<OperatorTableRow<TToken, T>> operatorTable)> termAndOperatorTableFactory A function which produces a parser for a single term and a table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in the operator table. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers. Build<TToken, T>(Func<Parser<TToken, T>, (Parser<TToken, T> term, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>> operatorTable)>) Builds a parser for expressions built from the operators in termAndOperatorTableFactory's second result. The operator table is a sequence of operators in precedence order: the operators in the first row have the highest precedence and operators in later rows have lower precedence. This overload is useful for recursive expressions (for example, languages with parenthesised subexpressions). termAndOperatorTableFactory's argument will be a parser which parses a full subexpression. Declaration public static Parser<TToken, T> Build<TToken, T>(Func<Parser<TToken, T>, (Parser<TToken, T> term, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>> operatorTable)> termAndOperatorTableFactory) Parameters Type Name Description Func<Parser<TToken, T>, (Parser<TToken, T> term, IEnumerable<IEnumerable<OperatorTableRow<TToken, T>>> operatorTable)> termAndOperatorTableFactory A function which produces a parser for a single term and a table of operators. Returns Type Description Parser<TToken, T> A parser for expressions built from the operators in the operator table. Type Parameters Name Description TToken The token type. T The return type of the parser. Remarks Since it's common for an expression language to have a recursive structure, overloads of Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) are provided which take a function. The function's argument will be the completed parser for a whole expression. This allows you to write recursive parsers."
  },
  "Pidgin.Expression.Operator.html": {
    "href": "Pidgin.Expression.Operator.html",
    "title": "Class Operator | Pidgin",
    "keywords": "Class Operator Methods to create OperatorTableRow<TToken, T> values. Inheritance object Operator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class Operator Methods Binary<TToken, T>(BinaryOperatorType, Parser<TToken, Func<T, T, T>>) Creates a row in a table of operators which contains a single binary infix operator with the specified associativity. Can be combined with other OperatorTableRow<TToken, T>s using And(OperatorTableRow<TToken, T>) to build a larger row. Declaration public static OperatorTableRow<TToken, T> Binary<TToken, T>(BinaryOperatorType type, Parser<TToken, Func<T, T, T>> opParser) Parameters Type Name Description BinaryOperatorType type The associativity of the infix operator. Parser<TToken, Func<T, T, T>> opParser A parser for an infix operator. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a single infix operator. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. InfixL<TToken, T>(Parser<TToken, Func<T, T, T>>) Creates a row in a table of operators which contains a single left-associative infix operator. Can be combined with other OperatorTableRow<TToken, T>s using And(OperatorTableRow<TToken, T>) to build a larger row. Declaration public static OperatorTableRow<TToken, T> InfixL<TToken, T>(Parser<TToken, Func<T, T, T>> opParser) Parameters Type Name Description Parser<TToken, Func<T, T, T>> opParser A parser for an infix operator. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a single infix operator. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. InfixN<TToken, T>(Parser<TToken, Func<T, T, T>>) Creates a row in a table of operators which contains a single non-associative infix operator. Can be combined with other OperatorTableRow<TToken, T>s using And(OperatorTableRow<TToken, T>) to build a larger row. Declaration public static OperatorTableRow<TToken, T> InfixN<TToken, T>(Parser<TToken, Func<T, T, T>> opParser) Parameters Type Name Description Parser<TToken, Func<T, T, T>> opParser A parser for an infix operator. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a single infix operator. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. InfixR<TToken, T>(Parser<TToken, Func<T, T, T>>) Creates a row in a table of operators which contains a single right-associative infix operator. Can be combined with other OperatorTableRow<TToken, T>s using And(OperatorTableRow<TToken, T>) to build a larger row. Declaration public static OperatorTableRow<TToken, T> InfixR<TToken, T>(Parser<TToken, Func<T, T, T>> opParser) Parameters Type Name Description Parser<TToken, Func<T, T, T>> opParser A parser for an infix operator. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a single infix operator. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. PostfixChainable<TToken, T>(params Parser<TToken, Func<T, T>>[]) Creates a row in a table of operators which contains a chainable collection of postfix operators. By default Postfix<TToken, T>(Parser<TToken, Func<T, T>>) operators can only appear once, so foo()() would not be parsed as \"call(call(foo))\". This method is equivalent to: Postfix( OneOf(opParsers) .AtLeastOnce() .Select<Func<T, T>>(fs => z => fs.Aggregate(z, (x, f) => f(x))) ) Declaration public static OperatorTableRow<TToken, T> PostfixChainable<TToken, T>(params Parser<TToken, Func<T, T>>[] opParsers) Parameters Type Name Description Parser<TToken, Func<T, T>>[] opParsers A collection of parsers for individual postfix operators. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a chainable collection of postfix operators. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. PostfixChainable<TToken, T>(IEnumerable<Parser<TToken, Func<T, T>>>) Creates a row in a table of operators which contains a chainable collection of postfix operators. By default Postfix<TToken, T>(Parser<TToken, Func<T, T>>) operators can only appear once, so foo()() would not be parsed as \"call(call(foo))\". This method is equivalent to: Postfix( OneOf(opParsers) .AtLeastOnce() .Select<Func<T, T>>(fs => z => fs.Aggregate(z, (x, f) => f(x))) ) Declaration public static OperatorTableRow<TToken, T> PostfixChainable<TToken, T>(IEnumerable<Parser<TToken, Func<T, T>>> opParsers) Parameters Type Name Description IEnumerable<Parser<TToken, Func<T, T>>> opParsers A collection of parsers for individual postfix operators. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a chainable collection of postfix operators. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Postfix<TToken, T>(Parser<TToken, Func<T, T>>) Creates a row in a table of operators which contains a single postfix operator. Can be combined with other OperatorTableRow<TToken, T>s using And(OperatorTableRow<TToken, T>) to build a larger row. Declaration public static OperatorTableRow<TToken, T> Postfix<TToken, T>(Parser<TToken, Func<T, T>> opParser) Parameters Type Name Description Parser<TToken, Func<T, T>> opParser A parser for an postfix operator. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a single postfix operator. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. PrefixChainable<TToken, T>(params Parser<TToken, Func<T, T>>[]) Creates a row in a table of operators which contains a chainable collection of prefix operators. By default Prefix<TToken, T>(Parser<TToken, Func<T, T>>) operators can only appear once, so - - 1 would not be parsed as \"minus minus 1\". This method is equivalent to: Prefix( OneOf(opParsers) .AtLeastOnce() .Select<Func<T, T>>(fs => z => fs.AggregateR(z, (f, x) => f(x))) ) Declaration public static OperatorTableRow<TToken, T> PrefixChainable<TToken, T>(params Parser<TToken, Func<T, T>>[] opParsers) Parameters Type Name Description Parser<TToken, Func<T, T>>[] opParsers A collection of parsers for individual prefix operators. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a chainable collection of prefix operators. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. PrefixChainable<TToken, T>(IEnumerable<Parser<TToken, Func<T, T>>>) Creates a row in a table of operators which contains a chainable collection of prefix operators. By default Prefix<TToken, T>(Parser<TToken, Func<T, T>>) operators can only appear once, so - - 1 would not be parsed as \"minus minus 1\". This method is equivalent to: Prefix( OneOf(opParsers) .AtLeastOnce() .Select<Func<T, T>>(fs => z => fs.AggregateR(z, (f, x) => f(x))) ) Declaration public static OperatorTableRow<TToken, T> PrefixChainable<TToken, T>(IEnumerable<Parser<TToken, Func<T, T>>> opParsers) Parameters Type Name Description IEnumerable<Parser<TToken, Func<T, T>>> opParsers A collection of parsers for individual prefix operators. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a chainable collection of prefix operators. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Prefix<TToken, T>(Parser<TToken, Func<T, T>>) Creates a row in a table of operators which contains a single prefix operator. Can be combined with other OperatorTableRow<TToken, T>s using And(OperatorTableRow<TToken, T>) to build a larger row. Declaration public static OperatorTableRow<TToken, T> Prefix<TToken, T>(Parser<TToken, Func<T, T>> opParser) Parameters Type Name Description Parser<TToken, Func<T, T>> opParser A parser for an prefix operator. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a single prefix operator. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Unary<TToken, T>(UnaryOperatorType, Parser<TToken, Func<T, T>>) Creates a row in a table of operators which contains a single unary operator - either a prefix operator or a postfix operator. Can be combined with other OperatorTableRow<TToken, T>s using And(OperatorTableRow<TToken, T>) to build a larger row. Declaration public static OperatorTableRow<TToken, T> Unary<TToken, T>(UnaryOperatorType type, Parser<TToken, Func<T, T>> opParser) Parameters Type Name Description UnaryOperatorType type The type of the unary operator. Parser<TToken, Func<T, T>> opParser A parser for a unary operator. Returns Type Description OperatorTableRow<TToken, T> A row in a table of operators which contains a single unary operator. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser."
  },
  "Pidgin.Expression.OperatorTableRow-2.html": {
    "href": "Pidgin.Expression.OperatorTableRow-2.html",
    "title": "Class OperatorTableRow<TToken, T> | Pidgin",
    "keywords": "Class OperatorTableRow<TToken, T> Represents a row in a table of operators. Contains a collection of parsers for operators at a single precendence level. Inheritance object OperatorTableRow<TToken, T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public sealed class OperatorTableRow<TToken, T> Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Constructors OperatorTableRow(IEnumerable<Parser<TToken, Func<T, T, T>>>?, IEnumerable<Parser<TToken, Func<T, T, T>>>?, IEnumerable<Parser<TToken, Func<T, T, T>>>?, IEnumerable<Parser<TToken, Func<T, T>>>?, IEnumerable<Parser<TToken, Func<T, T>>>?) Creates a row in a table of operators containing a collection of parsers for operators at a single precedence level. Declaration public OperatorTableRow(IEnumerable<Parser<TToken, Func<T, T, T>>>? infixNOps, IEnumerable<Parser<TToken, Func<T, T, T>>>? infixLOps, IEnumerable<Parser<TToken, Func<T, T, T>>>? infixROps, IEnumerable<Parser<TToken, Func<T, T>>>? prefixOps, IEnumerable<Parser<TToken, Func<T, T>>>? postfixOps) Parameters Type Name Description IEnumerable<Parser<TToken, Func<T, T, T>>> infixNOps A collection of parsers for the non-associative infix operators at this precedence level. IEnumerable<Parser<TToken, Func<T, T, T>>> infixLOps A collection of parsers for the left-associative infix operators at this precedence level. IEnumerable<Parser<TToken, Func<T, T, T>>> infixROps A collection of parsers for the right-associative infix operators at this precedence level. IEnumerable<Parser<TToken, Func<T, T>>> prefixOps A collection of parsers for the prefix operators at this precedence level. IEnumerable<Parser<TToken, Func<T, T>>> postfixOps A collection of parsers for the postfix operators at this precedence level. Properties Empty An empty row in a table of operators. Declaration public static OperatorTableRow<TToken, T> Empty { get; } Property Value Type Description OperatorTableRow<TToken, T> InfixLOps A collection of parsers for the left-associative infix operators at this precedence level. Declaration public IEnumerable<Parser<TToken, Func<T, T, T>>> InfixLOps { get; } Property Value Type Description IEnumerable<Parser<TToken, Func<T, T, T>>> InfixNOps A collection of parsers for the non-associative infix operators at this precedence level. Declaration public IEnumerable<Parser<TToken, Func<T, T, T>>> InfixNOps { get; } Property Value Type Description IEnumerable<Parser<TToken, Func<T, T, T>>> InfixROps A collection of parsers for the right-associative infix operators at this precedence level. Declaration public IEnumerable<Parser<TToken, Func<T, T, T>>> InfixROps { get; } Property Value Type Description IEnumerable<Parser<TToken, Func<T, T, T>>> PostfixOps A collection of parsers for the postfix operators at this precedence level. Declaration public IEnumerable<Parser<TToken, Func<T, T>>> PostfixOps { get; } Property Value Type Description IEnumerable<Parser<TToken, Func<T, T>>> PrefixOps A collection of parsers for the prefix operators at this precedence level. Declaration public IEnumerable<Parser<TToken, Func<T, T>>> PrefixOps { get; } Property Value Type Description IEnumerable<Parser<TToken, Func<T, T>>> Methods And(OperatorTableRow<TToken, T>) Combine two rows at the same precedence level. Declaration public OperatorTableRow<TToken, T> And(OperatorTableRow<TToken, T> otherRow) Parameters Type Name Description OperatorTableRow<TToken, T> otherRow A collection of parsers for operators. Returns Type Description OperatorTableRow<TToken, T> The current collection of parsers combined with otherRow."
  },
  "Pidgin.Expression.UnaryOperatorType.html": {
    "href": "Pidgin.Expression.UnaryOperatorType.html",
    "title": "Enum UnaryOperatorType | Pidgin",
    "keywords": "Enum UnaryOperatorType The type of the unary operator: prefix or postfix. Declaration public enum UnaryOperatorType Fields Name Description Postfix Denotes a postfix operator Prefix Denotes a prefix operator"
  },
  "Pidgin.Expression.html": {
    "href": "Pidgin.Expression.html",
    "title": "Namespace Pidgin.Expression | Pidgin",
    "keywords": "Namespace Pidgin.Expression Classes ExpressionParser Contains tools for parsing expression languages with associative infix operators. To get started, write a Parser<TToken, T>, to parse an atomic term in your expression language, and use the Operator class to create a table of operator parsers in order of their precedence. Then call one of the Build<TToken, T>(Parser<TToken, T>, IEnumerable<OperatorTableRow<TToken, T>>) overloads to compile the table of operators into a Parser<TToken, T>. Operator Methods to create OperatorTableRow<TToken, T> values. OperatorTableRow<TToken, T> Represents a row in a table of operators. Contains a collection of parsers for operators at a single precendence level. Enums BinaryOperatorType The associativity of the binary operator: left-associative, right-associative, or non-associative. UnaryOperatorType The type of the unary operator: prefix or postfix."
  },
  "Pidgin.ITokenStream-1.html": {
    "href": "Pidgin.ITokenStream-1.html",
    "title": "Interface ITokenStream<TToken> | Pidgin",
    "keywords": "Interface ITokenStream<TToken> An interface for streams of TToken, which can be consumed by Parser<TToken, T>s. Declaration public interface ITokenStream<TToken> Type Parameters Name Description TToken The type of tokens the stream produces. Properties ChunkSizeHint A hint to the parser indicating a default number of tokens to request when calling Read(Span<TToken>). ITokenStream<TToken> implementations may override this property if there's an optimal amount of data to pull from the stream in a single chunk. For example, if your token stream has an internal buffer, then you might want to override ChunkSizeHint to return buffer.Length. The default is 1024. Declaration int ChunkSizeHint { get; } Property Value Type Description int The default number of tokens to request when calling Read(Span<TToken>). Methods Read(Span<TToken>) Read up to buffer.Length tokens into buffer. Return the actual number of tokens read, which may be fewer than the size of the buffer if the stream has reached the end. Declaration int Read(Span<TToken> buffer) Parameters Type Name Description Span<TToken> buffer The buffer to read tokens into. Returns Type Description int The actual number of tokens read. Return(ReadOnlySpan<TToken>) Push some un-consumed tokens back into the stream. Parser<TToken, T>s call this method when they are finished parsing. ITokenStream<TToken> implementations may override this method if they want to implement resumable parsing. (See ResumableTokenStream<TToken>.) The default implementation does nothing and discards the leftovers. Declaration void Return(ReadOnlySpan<TToken> leftovers) Parameters Type Name Description ReadOnlySpan<TToken> leftovers The leftovers to push back into the stream."
  },
  "Pidgin.Incremental.EditInfo.html": {
    "href": "Pidgin.Incremental.EditInfo.html",
    "title": "Class EditInfo | Pidgin",
    "keywords": "Class EditInfo Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Inheritance object EditInfo Implements IEquatable<EditInfo> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public record EditInfo : IEquatable<EditInfo> Constructors EditInfo(EditInfo) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration protected EditInfo(EditInfo original) Parameters Type Name Description EditInfo original EditInfo(LocationRange, long) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public EditInfo(LocationRange InputRange, long NewContentLength) Parameters Type Name Description LocationRange InputRange The range in the original input stream that is being replaced. long NewContentLength The length of the new content that replaces the original range. Properties EqualityContract Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type InputRange The range in the original input stream that is being replaced. Declaration public LocationRange InputRange { get; init; } Property Value Type Description LocationRange NewContentLength The length of the new content that replaces the original range. Declaration public long NewContentLength { get; init; } Property Value Type Description long Methods Deconstruct(out LocationRange, out long) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public void Deconstruct(out LocationRange InputRange, out long NewContentLength) Parameters Type Name Description LocationRange InputRange long NewContentLength Equals(EditInfo?) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public virtual bool Equals(EditInfo? other) Parameters Type Name Description EditInfo other Returns Type Description bool Equals(object?) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(EditInfo?, EditInfo?) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public static bool operator ==(EditInfo? left, EditInfo? right) Parameters Type Name Description EditInfo left EditInfo right Returns Type Description bool operator !=(EditInfo?, EditInfo?) Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. Declaration public static bool operator !=(EditInfo? left, EditInfo? right) Parameters Type Name Description EditInfo left EditInfo right Returns Type Description bool Implements IEquatable<T>"
  },
  "Pidgin.Incremental.IIncrementalParseResult-1.html": {
    "href": "Pidgin.Incremental.IIncrementalParseResult-1.html",
    "title": "Interface IIncrementalParseResult<T> | Pidgin",
    "keywords": "Interface IIncrementalParseResult<T> Represents the result of an incremental parse operation, supporting shifting of locations in response to edits. Declaration public interface IIncrementalParseResult<T> where T : class, IIncrementalParseResult<T> Type Parameters Name Description T The type of the object implementing this interface. Methods ShiftBy(long) Returns a copy of this result with all locations shifted by the specified amount. Declaration T ShiftBy(long amount) Parameters Type Name Description long amount The amount by which to shift locations. Returns Type Description T A new result with shifted locations. Remarks An implementation can simply return this if the object does not contain any source locations that would need shifting."
  },
  "Pidgin.Incremental.IncrementalParseContext.html": {
    "href": "Pidgin.Incremental.IncrementalParseContext.html",
    "title": "Class IncrementalParseContext | Pidgin",
    "keywords": "Class IncrementalParseContext Represents the context for an incremental parse operation, tracking the list of edits applied to the input and the cache of previous parse results. Inheritance object IncrementalParseContext Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class IncrementalParseContext Properties Edits Gets the list of edits that have been applied to the input. Declaration public ImmutableList<EditInfo> Edits { get; } Property Value Type Description ImmutableList<EditInfo> Methods AddEdit(EditInfo) Returns a new IncrementalParseContext with the specified edit added to the list of edits. Declaration public IncrementalParseContext AddEdit(EditInfo edit) Parameters Type Name Description EditInfo edit The edit to add. Returns Type Description IncrementalParseContext A new IncrementalParseContext with the edit applied."
  },
  "Pidgin.Incremental.IncrementalParser.html": {
    "href": "Pidgin.Incremental.IncrementalParser.html",
    "title": "Class IncrementalParser | Pidgin",
    "keywords": "Class IncrementalParser Extension methods for constructing and running incremental parsers parsers which reuse the results of previous parses. Inheritance object IncrementalParser Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class IncrementalParser Methods Incremental<TToken, T>(Parser<TToken, T>) Creates a parser which runs parser incrementally. Declaration public static Parser<TToken, T> Incremental<TToken, T>(this Parser<TToken, T> parser) where T : class, IIncrementalParseResult<T> Parameters Type Name Description Parser<TToken, T> parser The parser to run incrementally. Returns Type Description Parser<TToken, T> A parser which runs parser incrementally. Type Parameters Name Description TToken The type of tokens in the input stream. T The type of the value returned by the parser. Exceptions Type Condition ArgumentNullException Thrown if parser is null. ParseIncrementally<TToken, T>(Parser<TToken, T>, ITokenStream<TToken>, IncrementalParseContext, IConfiguration<TToken>?) Applies parser to input, reusing results from the supplied context when possible. Declaration public static Result<TToken, (IncrementalParseContext Context, T Value)> ParseIncrementally<TToken, T>(this Parser<TToken, T> parser, ITokenStream<TToken> input, IncrementalParseContext context, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser The parser to run incrementally. ITokenStream<TToken> input The input token stream to parse. IncrementalParseContext context The incremental parse context containing cached results from the previous parse. Can be null if this is the first time running this parser. IConfiguration<TToken> configuration The parser configuration, or null to use the default configuration. Returns Type Description Result<TToken, (IncrementalParseContext Context, T Value)> A Result<TToken, T> containing a tuple of the new IncrementalParseContext and the parsed value. Type Parameters Name Description TToken The type of tokens in the input stream. T The type of the value returned by the parser. Examples // First parse (no context) var (context, result) = parser.ParseIncrementally(input, null).Value; // ...user edits input, producing newInput and an Edit instance... var edit = new Edit(new LocationRange(5, 3), 2); // example edit var newContext = context.AddEdit(edit); // Incremental parse after edit var (context2, result2) = parser.ParseIncrementally(newInput, newContext); Exceptions Type Condition ArgumentNullException Thrown if parser or input is null. InvalidOperationException Thrown if the result cache is unexpectedly null."
  },
  "Pidgin.Incremental.LocationRange.html": {
    "href": "Pidgin.Incremental.LocationRange.html",
    "title": "Class LocationRange | Pidgin",
    "keywords": "Class LocationRange Represents a portion of an input stream, defined by a start position and a length. Inheritance object LocationRange Implements IEquatable<LocationRange> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public record LocationRange : IEquatable<LocationRange> Constructors LocationRange(LocationRange) Represents a portion of an input stream, defined by a start position and a length. Declaration protected LocationRange(LocationRange original) Parameters Type Name Description LocationRange original LocationRange(long, long) Represents a portion of an input stream, defined by a start position and a length. Declaration public LocationRange(long Start, long Length) Parameters Type Name Description long Start The starting location of the range. long Length The length of the range. Properties End The location immediately after the end of the range. Declaration public long End { get; } Property Value Type Description long EqualityContract Represents a portion of an input stream, defined by a start position and a length. Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Length The length of the range. Declaration public long Length { get; init; } Property Value Type Description long Start The starting location of the range. Declaration public long Start { get; init; } Property Value Type Description long Methods Deconstruct(out long, out long) Represents a portion of an input stream, defined by a start position and a length. Declaration public void Deconstruct(out long Start, out long Length) Parameters Type Name Description long Start long Length Equals(LocationRange?) Represents a portion of an input stream, defined by a start position and a length. Declaration public virtual bool Equals(LocationRange? other) Parameters Type Name Description LocationRange other Returns Type Description bool Equals(object?) Represents a portion of an input stream, defined by a start position and a length. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Represents a portion of an input stream, defined by a start position and a length. Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Represents a portion of an input stream, defined by a start position and a length. Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Represents a portion of an input stream, defined by a start position and a length. Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators operator ==(LocationRange?, LocationRange?) Represents a portion of an input stream, defined by a start position and a length. Declaration public static bool operator ==(LocationRange? left, LocationRange? right) Parameters Type Name Description LocationRange left LocationRange right Returns Type Description bool operator !=(LocationRange?, LocationRange?) Represents a portion of an input stream, defined by a start position and a length. Declaration public static bool operator !=(LocationRange? left, LocationRange? right) Parameters Type Name Description LocationRange left LocationRange right Returns Type Description bool Implements IEquatable<T>"
  },
  "Pidgin.Incremental.html": {
    "href": "Pidgin.Incremental.html",
    "title": "Namespace Pidgin.Incremental | Pidgin",
    "keywords": "Namespace Pidgin.Incremental Classes EditInfo Represents information about an edit to an input stream, including the range of the original input affected and the length of the new content. IncrementalParseContext Represents the context for an incremental parse operation, tracking the list of edits applied to the input and the cache of previous parse results. IncrementalParser Extension methods for constructing and running incremental parsers parsers which reuse the results of previous parses. LocationRange Represents a portion of an input stream, defined by a start position and a length. Interfaces IIncrementalParseResult<T> Represents the result of an incremental parse operation, supporting shifting of locations in response to edits."
  },
  "Pidgin.Maybe-1.html": {
    "href": "Pidgin.Maybe-1.html",
    "title": "Struct Maybe<T> | Pidgin",
    "keywords": "Struct Maybe<T> Represents a single possibly absent value. Like Nullable but works for reference types as well as value types. Implements IEquatable<Maybe<T>> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public readonly struct Maybe<T> : IEquatable<Maybe<T>> Type Parameters Name Description T The type of the contained value. Constructors Maybe(T) Create a Maybe<T> containing a value. Declaration public Maybe(T value) Parameters Type Name Description T value The value. Properties HasValue Does the Maybe<T> contain a value?. Declaration public bool HasValue { get; } Property Value Type Description bool True if and only if the Maybe<T> contains a value. Value Get the value from the Maybe<T>, throwing InvalidOperationException if the value is absent. Declaration public T Value { get; } Property Value Type Description T The value. Exceptions Type Condition InvalidOperationException Thrown when the Maybe<T> does not contain a value. Methods Cast<U>() Cast the value contained in the Maybe<T> to the specified result type. Declaration public Maybe<U> Cast<U>() Returns Type Description Maybe<U> A Maybe<T> containing this Maybe<T>'s value casted to U, if the HasValue property returns true, or Nothing<T>(). Type Parameters Name Description U The type to cast the contained value to. Exceptions Type Condition InvalidCastException Thrown when the contained value is not an instance of U. Equals(Maybe<T>) Represents a single possibly absent value. Like Nullable but works for reference types as well as value types. Declaration public bool Equals(Maybe<T> other) Parameters Type Name Description Maybe<T> other Returns Type Description bool Equals(object?) Represents a single possibly absent value. Like Nullable but works for reference types as well as value types. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Represents a single possibly absent value. Like Nullable but works for reference types as well as value types. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() GetValueOrDefault() Get the value from the Maybe<T>, or return a default value. Declaration public T GetValueOrDefault() Returns Type Description T The value if HasValue is true, or a default value. GetValueOrDefault(Func<T>) Get the value from the Maybe<T>, or return the result of calling value. Declaration public T GetValueOrDefault(Func<T> value) Parameters Type Name Description Func<T> value A function to call to create a default value, if the Maybe<T> does not contain a value. Returns Type Description T The value if HasValue is true, or the result of calling value. GetValueOrDefault(T) Get the value from the Maybe<T>, or return value. Declaration public T GetValueOrDefault(T value) Parameters Type Name Description T value The default value to return, if the Maybe<T> does not contain a value. Returns Type Description T The value if HasValue is true, or value. Match<U>(Func<T, U>, Func<U>) Tear down this Maybe<T> using a function for the two possible outcomes. If HasValue is true, just will be called. Otherwise, nothing will be called. Declaration public U Match<U>(Func<T, U> just, Func<U> nothing) Parameters Type Name Description Func<T, U> just Called when the result has a value. Func<U> nothing Called when the result does not have a value. Returns Type Description U The result of calling the just or nothing function. Type Parameters Name Description U The return type. OfType<U>() Cast the value contained in the Maybe<T> to the specified result type, or return Nothing<T>() if the contained value is not an instance of U. Declaration public Maybe<U> OfType<U>() Returns Type Description Maybe<U> A Maybe<T> containing this Maybe<T>'s value casted to U, if the HasValue property returns true and the contained value is an instance of U, or Nothing<T>(). Type Parameters Name Description U The type to cast the contained value to. SelectMany<U>(Func<T, Maybe<U>>) Projects the element of the Maybe<T> into a possibly-absent value, and flattens the resulting value into a single Maybe<T>. Declaration public Maybe<U> SelectMany<U>(Func<T, Maybe<U>> selector) Parameters Type Name Description Func<T, Maybe<U>> selector A transformation function to apply to the contained value. Returns Type Description Maybe<U> The resulting Maybe<T>, or Nothing<T>() if the HasValue property returns false or the selector returns an absent value. Type Parameters Name Description U The type of the resulting possibly-absent value. SelectMany<U, R>(Func<T, Maybe<U>>, Func<T, U, R>) Projects the element of the Maybe<T> into a possibly-absent value, and flattens the resulting value into a single Maybe<T>, applying a result selector function to the two values. Declaration public Maybe<R> SelectMany<U, R>(Func<T, Maybe<U>> selector, Func<T, U, R> result) Parameters Type Name Description Func<T, Maybe<U>> selector A transformation function to apply to the contained value. Func<T, U, R> result A transformation function to apply to the contained value and the value contained in the selected Maybe<T>. Returns Type Description Maybe<R> The result of applying selector to the contained value and result to the intermediate values, or Nothing<T>() if the HasValue property returns false or the selector returns an absent value. Type Parameters Name Description U The type of the value to select. R The type of the resulting possibly-absent value. Select<U>(Func<T, U>) Project the value contained in the Maybe<T> using the specified transformation function. Declaration public Maybe<U> Select<U>(Func<T, U> selector) Parameters Type Name Description Func<T, U> selector A transformation function to apply to the contained value. Returns Type Description Maybe<U> The result of applying the transformation function to the contained value, or Nothing<T>(). Type Parameters Name Description U The type of the resulting value. Where(Func<T, bool>) Filter a Maybe<T> according to a predicate. Declaration public Maybe<T> Where(Func<T, bool> predicate) Parameters Type Name Description Func<T, bool> predicate A predicate to apply to the value contained within the Maybe<T>. Returns Type Description Maybe<T> A Maybe<T> containing the current Maybe<T>'s Value, if the HasValue property returns true and the value satisfies the predicate, or Nothing<T>(). Operators operator ==(Maybe<T>, Maybe<T>) Equality operator. Declaration public static bool operator ==(Maybe<T> left, Maybe<T> right) Parameters Type Name Description Maybe<T> left The left Expected<TToken>. Maybe<T> right The right Expected<TToken>. Returns Type Description bool operator !=(Maybe<T>, Maybe<T>) Inequality operator. Declaration public static bool operator !=(Maybe<T> left, Maybe<T> right) Parameters Type Name Description Maybe<T> left The left Expected<TToken>. Maybe<T> right The right Expected<TToken>. Returns Type Description bool Implements IEquatable<T>"
  },
  "Pidgin.Maybe.html": {
    "href": "Pidgin.Maybe.html",
    "title": "Class Maybe | Pidgin",
    "keywords": "Class Maybe Constructor functions, extension methods and utilities for working with Maybe<T>. Inheritance object Maybe Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class Maybe Methods Just<T>(T) Creates a Maybe<T> containing a value. Declaration public static Maybe<T> Just<T>(T value) Parameters Type Name Description T value The value of the new Maybe<T>. Returns Type Description Maybe<T> A Maybe<T> containing the specified value. Type Parameters Name Description T The type of the contained value. Nothing<T>() Creates a Maybe<T> containing no value. Declaration public static Maybe<T> Nothing<T>() Returns Type Description Maybe<T> A Maybe<T> containing no. Type Parameters Name Description T The type of the absent value."
  },
  "Pidgin.ParseError-1.html": {
    "href": "Pidgin.ParseError-1.html",
    "title": "Class ParseError<TToken> | Pidgin",
    "keywords": "Class ParseError<TToken> Represents an error encountered during parsing. Inheritance object ParseError<TToken> Implements IEquatable<ParseError<TToken>> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public class ParseError<TToken> : IEquatable<ParseError<TToken>> Type Parameters Name Description TToken The type of tokens in the input stream. Properties EOF Was the parse error due to encountering the end of the input stream while parsing?. Declaration public bool EOF { get; } Property Value Type Description bool True if and only if the parse error was due to encountering the end of the input stream while parsing. ErrorOffset The offset in the input stream at which the parse error occurred. Declaration public int ErrorOffset { get; } Property Value Type Description int ErrorOffsetLong The offset in the input stream at which the parse error occurred. Declaration public long ErrorOffsetLong { get; } Property Value Type Description long ErrorPos The position in the input stream at which the parse error occurred. Declaration public SourcePos ErrorPos { get; } Property Value Type Description SourcePos ErrorPosDelta The offset in the input stream at which the parse error occurred. Declaration public SourcePosDelta ErrorPosDelta { get; } Property Value Type Description SourcePosDelta Expected A collection of expected inputs. Declaration public IEnumerable<Expected<TToken>> Expected { get; } Property Value Type Description IEnumerable<Expected<TToken>> The collection of expected inputs. Message A custom error message. Declaration public string? Message { get; } Property Value Type Description string A custom error message, or null if the error was created without a custom error message. Unexpected The token which caused the parse error. Declaration public Maybe<TToken> Unexpected { get; } Property Value Type Description Maybe<TToken> The token which caused the parse error, or Nothing<T>() if the parse error was not caused by an unexpected token. Methods Equals(ParseError<TToken>?) Represents an error encountered during parsing. Declaration public bool Equals(ParseError<TToken>? other) Parameters Type Name Description ParseError<TToken> other Returns Type Description bool Equals(object?) Represents an error encountered during parsing. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Represents an error encountered during parsing. Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() RenderErrorMessage(SourcePos?) Render the parse error as a string. Declaration public string RenderErrorMessage(SourcePos? initialSourcePos = null) Parameters Type Name Description SourcePos? initialSourcePos The SourcePos of the beginning of the parse. Returns Type Description string An error message. ToString() Render the parse error as a string. Declaration public override string ToString() Returns Type Description string An error message. Overrides object.ToString() ToString(SourcePos) Render the parse error as a string. Declaration public string ToString(SourcePos initialSourcePos) Parameters Type Name Description SourcePos initialSourcePos The SourcePos of the beginning of the parse. Returns Type Description string An error message. Operators operator ==(ParseError<TToken>, ParseError<TToken>) Equality operator. Declaration public static bool operator ==(ParseError<TToken> left, ParseError<TToken> right) Parameters Type Name Description ParseError<TToken> left The left ParseError<TToken>. ParseError<TToken> right The right ParseError<TToken>. Returns Type Description bool operator !=(ParseError<TToken>, ParseError<TToken>) Inequality operator. Declaration public static bool operator !=(ParseError<TToken> left, ParseError<TToken> right) Parameters Type Name Description ParseError<TToken> left The left ParseError<TToken>. ParseError<TToken> right The right ParseError<TToken>. Returns Type Description bool Implements IEquatable<T>"
  },
  "Pidgin.ParseException-1.html": {
    "href": "Pidgin.ParseException-1.html",
    "title": "Class ParseException<TToken> | Pidgin",
    "keywords": "Class ParseException<TToken> Thrown when a parse error is encountered during parsing. Inheritance object Exception ParseException ParseException<TToken> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class ParseException<TToken> : ParseException, ISerializable Type Parameters Name Description TToken The type of the tokens in the parser's input stream. Properties Error The ParseError<TToken> that caused this exception. Declaration public ParseError<TToken> Error { get; } Property Value Type Description ParseError<TToken> Implements ISerializable"
  },
  "Pidgin.ParseException.html": {
    "href": "Pidgin.ParseException.html",
    "title": "Class ParseException | Pidgin",
    "keywords": "Class ParseException Thrown when a parse error is encountered during parsing. Inheritance object Exception ParseException ParseException<TToken> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class ParseException : Exception, ISerializable Implements ISerializable"
  },
  "Pidgin.ParseState-1.html": {
    "href": "Pidgin.ParseState-1.html",
    "title": "Struct ParseState<TToken> | Pidgin",
    "keywords": "Struct ParseState<TToken> Represents the state of a parsing process. Includes functionality managing and buffering the input stream, reporting errors, and computing source positions. For efficiency, this object is implemented as a mutable struct and is intended to be passed by reference. WARNING: This API is unstable and subject to change in future versions of the library. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public ref struct ParseState<TToken> Type Parameters Name Description TToken The type of tokens consumed by the parser. Properties Configuration Gets the parser configuration. Declaration public readonly IConfiguration<TToken> Configuration { get; } Property Value Type Description IConfiguration<TToken> Current Returns the current token. Declaration public TToken Current { get; } Property Value Type Description TToken HasCurrent Returns true if the parser has not reached the end of the input. Declaration public bool HasCurrent { get; } Property Value Type Description bool Location Returns the total number of tokens which have been consumed. In other words, the current absolute offset of the input stream. Declaration public long Location { get; } Property Value Type Description long Methods Advance(int) Advance the input stream by count tokens. Declaration public void Advance(int count = 1) Parameters Type Name Description int count The number of tokens to advance. Bookmark() Start buffering the input. Declaration public long Bookmark() Returns Type Description long The location of the bookmark. DiscardBookmark(long) Stop buffering the input. Declaration public void DiscardBookmark(long bookmark) Parameters Type Name Description long bookmark The location of the bookmark. LookAhead(int) Returns a Span<T> containing the next count tokens. This method may return a span shorter than count, if the parser reaches the end of the input stream. Declaration public ReadOnlySpan<TToken> LookAhead(int count) Parameters Type Name Description int count The number of tokens to advance. Returns Type Description ReadOnlySpan<TToken> A ReadOnlySpan<T> containing the tokens. Rewind(long) Return to a bookmark previously obtained from Bookmark() and discard it. Declaration public void Rewind(long bookmark) Parameters Type Name Description long bookmark The location of the bookmark. SetError(Maybe<TToken>, bool, long, string?) Sets the error. Call this when your parser fails. Declaration public void SetError(Maybe<TToken> unexpected, bool eof, long errorLocation, string? message) Parameters Type Name Description Maybe<TToken> unexpected The token that wasn't expected. bool eof Whether the parser unexpectedly reached the end of the input. long errorLocation The location at which the parse error was encountered. string message An error message."
  },
  "Pidgin.Parser-1.html": {
    "href": "Pidgin.Parser-1.html",
    "title": "Class Parser<TToken> | Pidgin",
    "keywords": "Class Parser<TToken> Constructor functions, extension methods and utilities for Parser<TToken, T> This class is intended to be imported statically, with the type parameter set to the type of tokens in your input stream (\"using static Pidgin.Parser<char>\"). Inheritance object Parser<TToken> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class Parser<TToken> Type Parameters Name Description TToken The type of the tokens in the input stream for parsers created by methods in this class. Properties Any Creates a parser that parses any single character. Declaration public static Parser<TToken, TToken> Any { get; } Property Value Type Description Parser<TToken, TToken> A parser that parses any single character. Configuration A parser which returns the current IConfiguration<TToken>. Declaration public static Parser<TToken, IConfiguration<TToken>> Configuration { get; } Property Value Type Description Parser<TToken, IConfiguration<TToken>> CurrentOffset A parser which returns the number of input tokens which have been consumed. Declaration public static Parser<TToken, int> CurrentOffset { get; } Property Value Type Description Parser<TToken, int> CurrentOffsetLong A parser which returns the number of input tokens which have been consumed. Declaration public static Parser<TToken, long> CurrentOffsetLong { get; } Property Value Type Description Parser<TToken, long> CurrentPos A parser which returns the current source position. Declaration public static Parser<TToken, SourcePos> CurrentPos { get; } Property Value Type Description Parser<TToken, SourcePos> CurrentSourcePosDelta A parser which returns the current source position. Declaration public static Parser<TToken, SourcePosDelta> CurrentSourcePosDelta { get; } Property Value Type Description Parser<TToken, SourcePosDelta> End Creates a parser which parses the end of the input stream. Declaration public static Parser<TToken, Unit> End { get; } Property Value Type Description Parser<TToken, Unit> A parser which parses the end of the input stream and returns Value. Methods Fail<T>(string) Creates a parser which always fails without consuming any input. Declaration public static Parser<TToken, T> Fail<T>(string message = \"Failed\") Parameters Type Name Description string message A custom error message. Returns Type Description Parser<TToken, T> A parser which always fails. Type Parameters Name Description T The return type of the resulting parser. FromResult<T>(T) Creates a parser which returns the specified value without consuming any input. Declaration public static Parser<TToken, T> FromResult<T>(T result) Parameters Type Name Description T result The value to return. Returns Type Description Parser<TToken, T> A parser which returns the specified value without consuming any input. Type Parameters Name Description T The type of the value to return. Return<T>(T) Creates a parser which returns the specified value without consuming any input. Declaration public static Parser<TToken, T> Return<T>(T value) Parameters Type Name Description T value The value to return. Returns Type Description Parser<TToken, T> A parser which returns the specified value without consuming any input. Type Parameters Name Description T The type of the value to return. Sequence(params TToken[]) Creates a parser that parses and returns a literal sequence of tokens. Declaration public static Parser<TToken, TToken[]> Sequence(params TToken[] tokens) Parameters Type Name Description TToken[] tokens A sequence of tokens. Returns Type Description Parser<TToken, TToken[]> A parser that parses a literal sequence of tokens. Sequence<T>(params Parser<TToken, T>[]) Creates a parser that applies a sequence of parsers and collects the results. This parser fails if any of its constituent parsers fail. Declaration public static Parser<TToken, IEnumerable<T>> Sequence<T>(params Parser<TToken, T>[] parsers) Parameters Type Name Description Parser<TToken, T>[] parsers A sequence of parsers. Returns Type Description Parser<TToken, IEnumerable<T>> A parser that applies a sequence of parsers and collects the results. Type Parameters Name Description T The return type of the parsers. Sequence<T>(IEnumerable<Parser<TToken, T>>) Creates a parser that applies a sequence of parsers and collects the results. This parser fails if any of its constituent parsers fail. Declaration public static Parser<TToken, IEnumerable<T>> Sequence<T>(IEnumerable<Parser<TToken, T>> parsers) Parameters Type Name Description IEnumerable<Parser<TToken, T>> parsers A sequence of parsers. Returns Type Description Parser<TToken, IEnumerable<T>> A parser that applies a sequence of parsers and collects the results. Type Parameters Name Description T The return type of the parsers. Sequence<TEnumerable>(TEnumerable) Creates a parser that parses and returns a literal sequence of tokens. The input enumerable is enumerated and copied to a list. Declaration public static Parser<TToken, TEnumerable> Sequence<TEnumerable>(TEnumerable tokens) where TEnumerable : IEnumerable<TToken> Parameters Type Name Description TEnumerable tokens A sequence of tokens. Returns Type Description Parser<TToken, TEnumerable> A parser that parses a literal sequence of tokens. Type Parameters Name Description TEnumerable The type of tokens to parse. Token(Func<TToken, bool>) Creates a parser that parses and returns a single token satisfying a predicate. Declaration public static Parser<TToken, TToken> Token(Func<TToken, bool> predicate) Parameters Type Name Description Func<TToken, bool> predicate A predicate function to apply to a token. Returns Type Description Parser<TToken, TToken> A parser that parses and returns a single token satisfying a predicate. Token(TToken) Creates a parser that parses and returns a single token. Declaration public static Parser<TToken, TToken> Token(TToken token) Parameters Type Name Description TToken token The token to parse. Returns Type Description Parser<TToken, TToken> A parser that parses and returns a single token."
  },
  "Pidgin.Parser-2.html": {
    "href": "Pidgin.Parser-2.html",
    "title": "Class Parser<TToken, T> | Pidgin",
    "keywords": "Class Parser<TToken, T> Represents a parser which consumes a stream of values of type TToken and returns a value of type T. A parser can either succeed, and return a value of type T, or fail and return a ParseError<TToken>. Inheritance object Parser<TToken, T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public abstract class Parser<TToken, T> Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Remarks This type is not intended to be subclassed by users of the library. Constructors Parser() Represents a parser which consumes a stream of values of type TToken and returns a value of type T. A parser can either succeed, and return a value of type T, or fail and return a ParseError<TToken>. Declaration protected Parser() Remarks This type is not intended to be subclassed by users of the library. Methods Assert(Func<T, bool>) Creates a parser that fails if the value returned by the current parser fails to satisfy a predicate. Declaration public Parser<TToken, T> Assert(Func<T, bool> predicate) Parameters Type Name Description Func<T, bool> predicate The predicate to apply to the value returned by the current parser. Returns Type Description Parser<TToken, T> A parser that fails if the value returned by the current parser fails to satisfy predicate. Remarks This type is not intended to be subclassed by users of the library. Assert(Func<T, bool>, Func<T, string>) Creates a parser that fails if the value returned by the current parser fails to satisfy a predicate. Declaration public Parser<TToken, T> Assert(Func<T, bool> predicate, Func<T, string> message) Parameters Type Name Description Func<T, bool> predicate The predicate to apply to the value returned by the current parser. Func<T, string> message A function to produce a custom error message to return when the value returned by the current parser fails to satisfy the predicate. Returns Type Description Parser<TToken, T> A parser that fails if the value returned by the current parser fails to satisfy predicate. Remarks This type is not intended to be subclassed by users of the library. Assert(Func<T, bool>, string) Creates a parser that fails if the value returned by the current parser fails to satisfy a predicate. Declaration public Parser<TToken, T> Assert(Func<T, bool> predicate, string message) Parameters Type Name Description Func<T, bool> predicate The predicate to apply to the value returned by the current parser. string message A custom error message to return when the value returned by the current parser fails to satisfy the predicate. Returns Type Description Parser<TToken, T> A parser that fails if the value returned by the current parser fails to satisfy predicate. Remarks This type is not intended to be subclassed by users of the library. AtLeastOnce() Creates a parser that applies the current parser one or more times. The resulting parser fails if the current parser fails the first time it is applied, or if the current parser fails after consuming input. Declaration public Parser<TToken, IEnumerable<T>> AtLeastOnce() Returns Type Description Parser<TToken, IEnumerable<T>> A parser that applies the current parser one or more times. Remarks This type is not intended to be subclassed by users of the library. AtLeastOnceThen<U>(Parser<TToken, U>) Creates a parser which applies this parser one or more times until terminator succeeds. Fails if this parser fails or if terminator fails after consuming input. Declaration public Parser<TToken, (IEnumerable<T>, U)> AtLeastOnceThen<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, (IEnumerable<T>, U)> A parser which applies this parser repeatedly until terminator succeeds. Type Parameters Name Description U The return type of the terminator parser. Remarks This type is not intended to be subclassed by users of the library. AtLeastOnceUntil<U>(Parser<TToken, U>) Creates a parser which applies this parser one or more times until terminator succeeds. Fails if this parser fails or if terminator fails after consuming input. The return value of terminator is ignored. Declaration public Parser<TToken, IEnumerable<T>> AtLeastOnceUntil<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies this parser repeatedly until terminator succeeds. Type Parameters Name Description U The return type of the terminator parser. Remarks p.AtLeastOnceUntil(q) is equivalent to p.AtLeastOnceThen(q).Select(t => t.Item1). Before<U>(Parser<TToken, U>) Creates a parser that applies the current parser followed by the specified parser. The resulting parser returns the result of the current parser, ignoring the result of the second parser. Declaration public Parser<TToken, T> Before<U>(Parser<TToken, U> parser) Parameters Type Name Description Parser<TToken, U> parser The parser to apply after applying the current parser. Returns Type Description Parser<TToken, T> A parser that applies the current parser followed by the specified parser. Type Parameters Name Description U The type of the value returned by the second parser. Remarks This type is not intended to be subclassed by users of the library. Between<U>(Parser<TToken, U>) Creates a parser that applies the specified parser both before and after applying the current parser. The resulting parser returns the result of the current parser, ignoring the return value of the bracketing parser. Declaration public Parser<TToken, T> Between<U>(Parser<TToken, U> parser) Parameters Type Name Description Parser<TToken, U> parser The parser to apply before and after applying the current parser. Returns Type Description Parser<TToken, T> A parser that applies the specified parser before and after applying the current parser. Type Parameters Name Description U The type of the value returned by the bracketing parser. Remarks This type is not intended to be subclassed by users of the library. Between<U, V>(Parser<TToken, U>, Parser<TToken, V>) Creates a parser that applies the specified parsers before and after applying the current parser. The resulting parser returns the result of the current parser, ignoring the return values of the bracketing parsers. Declaration public Parser<TToken, T> Between<U, V>(Parser<TToken, U> parser1, Parser<TToken, V> parser2) Parameters Type Name Description Parser<TToken, U> parser1 The parser to apply before applying the current parser. Parser<TToken, V> parser2 The parser to apply after applying the current parser. Returns Type Description Parser<TToken, T> A parser that applies the specified parsers before and after applying the current parser. Type Parameters Name Description U The type of the value returned by the first parser. V The type of the value returned by the second parser. Remarks This type is not intended to be subclassed by users of the library. Bind<U>(Func<T, Parser<TToken, U>>) Creates a parser that applies a transformation function to the return value of the current parser. The transformation function dynamically chooses a second parser, which is applied after applying the current parser. Declaration public Parser<TToken, U> Bind<U>(Func<T, Parser<TToken, U>> selector) Parameters Type Name Description Func<T, Parser<TToken, U>> selector A transformation function which returns a parser to apply after applying the current parser. Returns Type Description Parser<TToken, U> A parser which applies the current parser before applying the result of the selector function. Type Parameters Name Description U The type of the return value of the second parser. Remarks This type is not intended to be subclassed by users of the library. Bind<U, R>(Func<T, Parser<TToken, U>>, Func<T, U, R>) Creates a parser that applies a transformation function to the return value of the current parser. The transformation function dynamically chooses a second parser, which is applied after applying the current parser. Declaration public Parser<TToken, R> Bind<U, R>(Func<T, Parser<TToken, U>> selector, Func<T, U, R> result) Parameters Type Name Description Func<T, Parser<TToken, U>> selector A transformation function which returns a parser to apply after applying the current parser. Func<T, U, R> result A function to apply to the return values of the two parsers. Returns Type Description Parser<TToken, R> A parser which applies the current parser before applying the result of the selector function. Type Parameters Name Description U The type of the return value of the second parser. R The type of the return value of the resulting parser. Remarks This type is not intended to be subclassed by users of the library. Cast<U>() Cast the return value of the current parser to the specified result type. Declaration public Parser<TToken, U> Cast<U>() Returns Type Description Parser<TToken, U> A parser which returns this parser's return value casted to U. Type Parameters Name Description U The type to cast the return value to. Remarks This type is not intended to be subclassed by users of the library. Exceptions Type Condition InvalidCastException Thrown when the return value is not an instance of U. IgnoreResult() Creates a parser which behaves like the current parser but returns Value. Equivalent to p.WithResult(Unit.Value). Declaration public Parser<TToken, Unit> IgnoreResult() Returns Type Description Parser<TToken, Unit> A parser which behaves like the current parser but returns Value. Remarks This type is not intended to be subclassed by users of the library. Labelled(string) Creates a parser equivalent to the current parser, with a custom label. The label will be reported in an error message if the parser fails, instead of the default error message. ExpectedLabel Declaration public Parser<TToken, T> Labelled(string label) Parameters Type Name Description string label The custom label to apply to the current parser. Returns Type Description Parser<TToken, T> A parser equivalent to the current parser, with a custom label. Remarks This type is not intended to be subclassed by users of the library. Many() Creates a parser which applies the current parser zero or more times. The resulting parser fails if the current parser fails after consuming input. Declaration public Parser<TToken, IEnumerable<T>> Many() Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser zero or more times. Remarks This type is not intended to be subclassed by users of the library. ManyThen<U>(Parser<TToken, U>) Creates a parser which applies this parser zero or more times until terminator succeeds. Fails if this parser fails or if terminator fails after consuming input. Declaration public Parser<TToken, (IEnumerable<T>, U)> ManyThen<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, (IEnumerable<T>, U)> A parser which applies this parser repeatedly until terminator succeeds. Type Parameters Name Description U The return type of terminator. Remarks This type is not intended to be subclassed by users of the library. MapWithInput<U>(ReadOnlySpanFunc<TToken, T, U>) Returns a parser which runs the current parser and applies a selector function. The selector function receives a ReadOnlySpan<T> as its first argument, and the result of the current parser as its second argument. The ReadOnlySpan<T> represents the sequence of input tokens which were consumed by the parser. This allows you to write \"pattern\"-style parsers which match a sequence of tokens and return a view of the part of the input stream which they matched. This function is an alternative name for Slice<U>(ReadOnlySpanFunc<TToken, T, U>). Declaration public Parser<TToken, U> MapWithInput<U>(ReadOnlySpanFunc<TToken, T, U> selector) Parameters Type Name Description ReadOnlySpanFunc<TToken, T, U> selector A selector function which computes a result of type U. The arguments of the selector function are a ReadOnlySpan<T> containing the sequence of input tokens which were consumed by this parser, and the result of this parser. Returns Type Description Parser<TToken, U> A parser which runs the current parser and applies a selector function. Type Parameters Name Description U The result type. Remarks This type is not intended to be subclassed by users of the library. Map<U>(Func<T, U>) Creates a parser which applies the specified transformation function to the result of the current parser. This is an infix synonym for Map<TToken, T1, R>(Func<T1, R>, Parser<TToken, T1>). Declaration public Parser<TToken, U> Map<U>(Func<T, U> selector) Parameters Type Name Description Func<T, U> selector A transformation function. Returns Type Description Parser<TToken, U> A parser which applies selector to the result of the current parser. Type Parameters Name Description U The return type of the transformation function. Remarks This type is not intended to be subclassed by users of the library. OfType<U>() Creates a parser which casts the return value of the current parser to the specified result type, or fails if the return value is not an instance of U. Declaration public Parser<TToken, U> OfType<U>() Returns Type Description Parser<TToken, U> A parser which returns the current parser's return value casted to U, if the value is an instance of U. Type Parameters Name Description U The type to cast the return value of the current parser to. Remarks This type is not intended to be subclassed by users of the library. Optional() Creates a parser which applies the current parser and returns Nothing<T>() if the current parser fails without consuming any input. The resulting parser fails if the current parser fails after consuming input. Declaration public Parser<TToken, Maybe<T>> Optional() Returns Type Description Parser<TToken, Maybe<T>> A parser which applies the current parser and returns Nothing<T>() if the current parser fails without consuming any input. Remarks This type is not intended to be subclassed by users of the library. Or(Parser<TToken, T>) Creates a parser which tries to apply the current parser, applying the specified parser if the current parser fails without consuming any input. The resulting parser fails if both the current parser and the alternative parser fail, or if the current parser fails after consuming input. Declaration public Parser<TToken, T> Or(Parser<TToken, T> parser) Parameters Type Name Description Parser<TToken, T> parser The alternative parser to apply if the current parser fails without consuming any input. Returns Type Description Parser<TToken, T> A parser which tries to apply the current parser, and applies parser if the current parser fails without consuming any input. Remarks This type is not intended to be subclassed by users of the library. RecoverWith(Func<ParseError<TToken>, Parser<TToken, T>>) Creates a parser which runs the current parser, running errorHandler on failure. Declaration public Parser<TToken, T> RecoverWith(Func<ParseError<TToken>, Parser<TToken, T>> errorHandler) Parameters Type Name Description Func<ParseError<TToken>, Parser<TToken, T>> errorHandler A function which returns a parser to apply when the current parser fails. Returns Type Description Parser<TToken, T> A parser which runs the current parser, running errorHandler on failure. Remarks This type is not intended to be subclassed by users of the library. Repeat(int) Creates a parser which applies the current parser count times. Declaration public Parser<TToken, IEnumerable<T>> Repeat(int count) Parameters Type Name Description int count The number of times to apply the current parser. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser count times. Remarks This type is not intended to be subclassed by users of the library. Exceptions Type Condition InvalidOperationException count is less than 0. SelectMany<U, R>(Func<T, Parser<TToken, U>>, Func<T, U, R>) Creates a parser that applies a transformation function to the return value of the current parser. The transformation function dynamically chooses a second parser, which is applied after applying the current parser. Declaration public Parser<TToken, R> SelectMany<U, R>(Func<T, Parser<TToken, U>> selector, Func<T, U, R> result) Parameters Type Name Description Func<T, Parser<TToken, U>> selector A transformation function which returns a parser to apply after applying the current parser. Func<T, U, R> result A function to apply to the return values of the two parsers. Returns Type Description Parser<TToken, R> A parser which applies the current parser before applying the result of the selector function. Type Parameters Name Description U The type of the return value of the second parser. R The type of the return value of the resulting parser. Remarks This type is not intended to be subclassed by users of the library. Select<U>(Func<T, U>) Creates a parser which applies the specified transformation function to the result of the current parser. This is an infix synonym for Map<TToken, T1, R>(Func<T1, R>, Parser<TToken, T1>). Declaration public Parser<TToken, U> Select<U>(Func<T, U> selector) Parameters Type Name Description Func<T, U> selector A transformation function. Returns Type Description Parser<TToken, U> A parser which applies selector to the result of the current parser. Type Parameters Name Description U The return type of the transformation function. Remarks This type is not intended to be subclassed by users of the library. SeparatedAndOptionallyTerminatedAtLeastOnce<U>(Parser<TToken, U>) Creates a parser which applies the current parser at least once, interleaved and optionally terminated with a specified parser. The resulting parser ignores the return value of the separator parser. Declaration public Parser<TToken, IEnumerable<T>> SeparatedAndOptionallyTerminatedAtLeastOnce<U>(Parser<TToken, U> separator) Parameters Type Name Description Parser<TToken, U> separator A parser which parses a separator to be interleaved with the current parser. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser at least once, interleaved and optionally terminated by separator. Type Parameters Name Description U The return type of the separator parser. Remarks This type is not intended to be subclassed by users of the library. SeparatedAndOptionallyTerminated<U>(Parser<TToken, U>) Creates a parser which applies the current parser repeatedly, interleaved and optionally terminated with a specified parser. The resulting parser ignores the return value of the separator parser. Declaration public Parser<TToken, IEnumerable<T>> SeparatedAndOptionallyTerminated<U>(Parser<TToken, U> separator) Parameters Type Name Description Parser<TToken, U> separator A parser which parses a separator to be interleaved with the current parser. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser repeatedly, interleaved and optionally terminated by separator. Type Parameters Name Description U The return type of the separator parser. Remarks This type is not intended to be subclassed by users of the library. SeparatedAndTerminatedAtLeastOnce<U>(Parser<TToken, U>) Creates a parser which applies the current parser at least once, interleaved and terminated with a specified parser. The resulting parser ignores the return value of the separator parser. Declaration public Parser<TToken, IEnumerable<T>> SeparatedAndTerminatedAtLeastOnce<U>(Parser<TToken, U> separator) Parameters Type Name Description Parser<TToken, U> separator A parser which parses a separator to be interleaved with the current parser. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser at least once, interleaved and terminated by separator. Type Parameters Name Description U The return type of the separator parser. Remarks This type is not intended to be subclassed by users of the library. SeparatedAndTerminated<U>(Parser<TToken, U>) Creates a parser which applies the current parser repeatedly, interleaved and terminated with a specified parser. The resulting parser ignores the return value of the separator parser. Declaration public Parser<TToken, IEnumerable<T>> SeparatedAndTerminated<U>(Parser<TToken, U> separator) Parameters Type Name Description Parser<TToken, U> separator A parser which parses a separator to be interleaved with the current parser. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser repeatedly, interleaved and terminated by separator. Type Parameters Name Description U The return type of the separator parser. Remarks This type is not intended to be subclassed by users of the library. SeparatedAtLeastOnce<U>(Parser<TToken, U>) Creates a parser which applies the current parser at least once, interleaved with a specified parser. The resulting parser ignores the return value of the separator parser. Declaration public Parser<TToken, IEnumerable<T>> SeparatedAtLeastOnce<U>(Parser<TToken, U> separator) Parameters Type Name Description Parser<TToken, U> separator A parser which parses a separator to be interleaved with the current parser. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser at least once, interleaved by separator. Type Parameters Name Description U The return type of the separator parser. Remarks This type is not intended to be subclassed by users of the library. Separated<U>(Parser<TToken, U>) Creates a parser which applies the current parser repeatedly, interleaved with a specified parser. The resulting parser ignores the return value of the separator parser. Declaration public Parser<TToken, IEnumerable<T>> Separated<U>(Parser<TToken, U> separator) Parameters Type Name Description Parser<TToken, U> separator A parser which parses a separator to be interleaved with the current parser. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies the current parser repeatedly, interleaved by separator. Type Parameters Name Description U The return type of the separator parser. Remarks This type is not intended to be subclassed by users of the library. SkipAtLeastOnce() Creates a parser that applies the current parser one or more times, discarding the results. This is more efficient than AtLeastOnce(), if you don't need the results. The resulting parser fails if the current parser fails the first time it is applied, or if the current parser fails after consuming input. Declaration public Parser<TToken, Unit> SkipAtLeastOnce() Returns Type Description Parser<TToken, Unit> A parser that applies the current parser one or more times, discarding the results. Remarks This type is not intended to be subclassed by users of the library. SkipAtLeastOnceThen<U>(Parser<TToken, U>) Creates a parser which applies this parser one or more times until terminator succeeds, discarding the results. This is more efficient than AtLeastOnceThen<U>(Parser<TToken, U>) if you don't need the results. Fails if this parser fails or if terminator fails after consuming input. Declaration public Parser<TToken, U> SkipAtLeastOnceThen<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, U> A parser which applies this parser repeatedly until terminator succeeds, discarding the results. Type Parameters Name Description U The return type of the terminator parser. Remarks This type is not intended to be subclassed by users of the library. SkipAtLeastOnceUntil<U>(Parser<TToken, U>) Creates a parser which applies this parser one or more times until terminator succeeds, discarding the results. This is more efficient than AtLeastOnceUntil<U>(Parser<TToken, U>) if you don't need the results. Fails if this parser fails or if terminator fails after consuming input. The return value of terminator is ignored. Declaration public Parser<TToken, Unit> SkipAtLeastOnceUntil<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, Unit> A parser which applies this parser repeatedly until terminator succeeds, discarding the results. Type Parameters Name Description U The return type of the terminator parser. Remarks p.SkipAtLeastOnceUntil(q) is equivalent to p.SkipAtLeastOnceThen(q).ThenReturn(Unit.Value). SkipMany() Creates a parser which applies the current parser zero or more times, discarding the results. This is more efficient than Many(), if you don't need the results. The resulting parser fails if the current parser fails after consuming input. Declaration public Parser<TToken, Unit> SkipMany() Returns Type Description Parser<TToken, Unit> A parser which applies the current parser zero or more times. Remarks This type is not intended to be subclassed by users of the library. SkipManyThen<U>(Parser<TToken, U>) Creates a parser which applies this parser zero or more times until terminator succeeds, discarding the results. This is more efficient than ManyThen<U>(Parser<TToken, U>) if you don't need the results. Fails if this parser fails or if terminator fails after consuming input. Declaration public Parser<TToken, U> SkipManyThen<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, U> A parser which applies this parser repeatedly until terminator succeeds, discarding the results. Type Parameters Name Description U The return type of terminator. Remarks This type is not intended to be subclassed by users of the library. SkipUntil<U>(Parser<TToken, U>) Creates a parser which applies this parser zero or more times until terminator succeeds, discarding the results. This is more efficient than Until<U>(Parser<TToken, U>) if you don't need the results. Fails if this parser fails or if terminator fails after consuming input. The return value of terminator is ignored. Declaration public Parser<TToken, Unit> SkipUntil<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, Unit> A parser which applies this parser repeatedly until terminator succeeds, discarding the results. Type Parameters Name Description U The return type of terminator. Remarks p.SkipUntil(q) is equivalent to p.SkipManyThen(q).ThenReturn(Unit.Value). Slice<U>(ReadOnlySpanFunc<TToken, T, U>) Returns a parser which runs the current parser and applies a selector function. The selector function receives a ReadOnlySpan<T> as its first argument, and the result of the current parser as its second argument. The ReadOnlySpan<T> represents the sequence of input tokens which were consumed by the parser. This allows you to write \"pattern\"-style parsers which match a sequence of tokens and return a view of the part of the input stream which they matched. This function is an alternative name for MapWithInput<U>(ReadOnlySpanFunc<TToken, T, U>). Declaration public Parser<TToken, U> Slice<U>(ReadOnlySpanFunc<TToken, T, U> selector) Parameters Type Name Description ReadOnlySpanFunc<TToken, T, U> selector A selector function which computes a result of type U. The arguments of the selector function are a ReadOnlySpan<T> containing the sequence of input tokens which were consumed by this parser, and the result of this parser. Returns Type Description Parser<TToken, U> A parser which runs the current parser and applies a selector function. Type Parameters Name Description U The result type. Remarks This type is not intended to be subclassed by users of the library. ThenReturn<U>(U) Creates a parser which behaves like the current parser but returns result after a successful parse. This is a synonym for WithResult<U>(U). Declaration public Parser<TToken, U> ThenReturn<U>(U result) Parameters Type Name Description U result The result. Returns Type Description Parser<TToken, U> A parser which behaves like the current parser but returns result. Type Parameters Name Description U The type of the result. Remarks This type is not intended to be subclassed by users of the library. Examples Equivalent to using Select<U>(Func<T, U>) with a function that returns a fixed value, or Then<U>(Parser<TToken, U>) with Return<T>(T). p.ThenReturn(x) == p.Select(_ => x) == p.Then(Return(x)); Then<U>(Parser<TToken, U>) Creates a parser which applies the current parser followed by a specified parser. The resulting parser returns the result of the second parser, ignoring the result of the current parser. Declaration public Parser<TToken, U> Then<U>(Parser<TToken, U> parser) Parameters Type Name Description Parser<TToken, U> parser A parser to apply after applying the current parser. Returns Type Description Parser<TToken, U> A parser which applies the current parser followed by parser. Type Parameters Name Description U The return type of the second parser. Remarks This type is not intended to be subclassed by users of the library. Then<U>(Func<T, Parser<TToken, U>>) Creates a parser that applies a transformation function to the return value of the current parser. The transformation function dynamically chooses a second parser, which is applied after applying the current parser. Declaration public Parser<TToken, U> Then<U>(Func<T, Parser<TToken, U>> selector) Parameters Type Name Description Func<T, Parser<TToken, U>> selector A transformation function which returns a parser to apply after applying the current parser. Returns Type Description Parser<TToken, U> A parser which applies the current parser before applying the result of the selector function. Type Parameters Name Description U The type of the return value of the second parser. Remarks This function is a synonym for Bind<U>(Func<T, Parser<TToken, U>>). Then<U, R>(Parser<TToken, U>, Func<T, U, R>) Creates a parser which applies the current parser followed by a specified parser, applying a function to the two results. Declaration public Parser<TToken, R> Then<U, R>(Parser<TToken, U> parser, Func<T, U, R> result) Parameters Type Name Description Parser<TToken, U> parser A parser to apply after applying the current parser. Func<T, U, R> result A function to apply to the two parsed values. Returns Type Description Parser<TToken, R> A parser which applies the current parser followed by parser. Type Parameters Name Description U The return type of the second parser. R The return type of the composed parser. Remarks This is a synonym for Map<TToken, T1, T2, R>(Func<T1, T2, R>, Parser<TToken, T1>, Parser<TToken, T2>) with the arguments rearranged. Then<U, R>(Func<T, Parser<TToken, U>>, Func<T, U, R>) Creates a parser that applies a transformation function to the return value of the current parser. The transformation function dynamically chooses a second parser, which is applied after applying the current parser. Declaration public Parser<TToken, R> Then<U, R>(Func<T, Parser<TToken, U>> selector, Func<T, U, R> result) Parameters Type Name Description Func<T, Parser<TToken, U>> selector A transformation function which returns a parser to apply after applying the current parser. Func<T, U, R> result A function to apply to the return values of the two parsers. Returns Type Description Parser<TToken, R> A parser which applies the current parser before applying the result of the selector function. Type Parameters Name Description U The type of the return value of the second parser. R The type of the return value of the resulting parser. Remarks This function is a synonym for Bind<U, R>(Func<T, Parser<TToken, U>>, Func<T, U, R>). Trace(Func<T, string>) For debugging use. Creates a new parser which runs the current parser and prints the given message to the console. Declaration public Parser<TToken, T> Trace(Func<T, string> message) Parameters Type Name Description Func<T, string> message A message to write to the console. Returns Type Description Parser<TToken, T> A parser which runs the current parser and prints the given message to the console. Remarks This type is not intended to be subclassed by users of the library. Trace(string) For debugging use. Creates a new parser which runs the current parser and prints the given message to the console. Declaration public Parser<TToken, T> Trace(string message) Parameters Type Name Description string message A message to write to the console. Returns Type Description Parser<TToken, T> A parser which runs the current parser and prints the given message to the console. Remarks This type is not intended to be subclassed by users of the library. TraceResult() For debugging use. Creates a new parser which runs the current parser and prints the result to the console. Declaration public Parser<TToken, T> TraceResult() Returns Type Description Parser<TToken, T> A parser which runs the current parser and prints the result to the console. Remarks This type is not intended to be subclassed by users of the library. TryParse(ref ParseState<TToken>, ref PooledList<Expected<TToken>>, out T) Override this method to implement a custom parser. Use this if you can't do what you need using the base parser combinators. If your parser fails it should return false and call SetError(Maybe<TToken>, bool, long, string?). WARNING: This API is unstable and subject to change in future versions of the library. Declaration public abstract bool TryParse(ref ParseState<TToken> state, ref PooledList<Expected<TToken>> expecteds, out T result) Parameters Type Name Description ParseState<TToken> state The parser's state. PooledList<Expected<TToken>> expecteds A list to which the parser can add its expected tokens when it fails. T result The result. Returns Type Description bool True if the parser succeeded, false if it failed. Remarks This type is not intended to be subclassed by users of the library. Until<U>(Parser<TToken, U>) Creates a parser which applies this parser zero or more times until terminator succeeds. Fails if this parser fails or if terminator fails after consuming input. The return value of terminator is ignored. Declaration public Parser<TToken, IEnumerable<T>> Until<U>(Parser<TToken, U> terminator) Parameters Type Name Description Parser<TToken, U> terminator A parser to parse a terminator. Returns Type Description Parser<TToken, IEnumerable<T>> A parser which applies this parser repeatedly until terminator succeeds. Type Parameters Name Description U The return type of terminator. Remarks p.Until(q) is equivalent to p.ManyThen(q).Select(t => t.Item1). Where(Func<T, bool>) Creates a parser that fails if the value returned by the current parser fails to satisfy a predicate. Declaration public Parser<TToken, T> Where(Func<T, bool> predicate) Parameters Type Name Description Func<T, bool> predicate The predicate to apply to the value returned by the current parser. Returns Type Description Parser<TToken, T> A parser that fails if the value returned by the current parser fails to satisfy predicate. Remarks This function is a synonym of Assert(Func<T, bool>). WithResult<U>(U) Creates a parser which behaves like the current parser but returns result after a successful parse. This is a synonym for ThenReturn<U>(U). Declaration public Parser<TToken, U> WithResult<U>(U result) Parameters Type Name Description U result The result. Returns Type Description Parser<TToken, U> A parser which behaves like the current parser but returns result. Type Parameters Name Description U The type of the result. Remarks This type is not intended to be subclassed by users of the library. Examples Equivalent to using Select<U>(Func<T, U>) with a function that returns a fixed value, or Then<U>(Parser<TToken, U>) with Return<T>(T). p.WithResult(x) == p.Select(_ => x) == p.Then(Return(x)); Extension Methods IncrementalParser.ParseIncrementally<TToken, T>(Parser<TToken, T>, ITokenStream<TToken>, IncrementalParseContext, IConfiguration<TToken>?) ParserExtensions.ParseOrThrow<TToken, T>(Parser<TToken, T>, ITokenStream<TToken>, IConfiguration<TToken>?) ParserExtensions.ParseOrThrow<TToken, T>(Parser<TToken, T>, IEnumerable<TToken>, IConfiguration<TToken>?) ParserExtensions.ParseOrThrow<TToken, T>(Parser<TToken, T>, IEnumerator<TToken>, IConfiguration<TToken>?) ParserExtensions.ParseOrThrow<TToken, T>(Parser<TToken, T>, IList<TToken>, IConfiguration<TToken>?) ParserExtensions.ParseOrThrow<TToken, T>(Parser<TToken, T>, ReadOnlySpan<TToken>, IConfiguration<TToken>?) ParserExtensions.ParseOrThrow<TToken, T>(Parser<TToken, T>, TToken[], IConfiguration<TToken>?) ParserExtensions.ParseReadOnlyListOrThrow<TToken, T>(Parser<TToken, T>, IReadOnlyList<TToken>, IConfiguration<TToken>?) ParserExtensions.ParseReadOnlyList<TToken, T>(Parser<TToken, T>, IReadOnlyList<TToken>, IConfiguration<TToken>?) ParserExtensions.Parse<TToken, T>(Parser<TToken, T>, ITokenStream<TToken>, IConfiguration<TToken>?) ParserExtensions.Parse<TToken, T>(Parser<TToken, T>, ref ParseState<TToken>) ParserExtensions.Parse<TToken, T>(Parser<TToken, T>, IEnumerable<TToken>, IConfiguration<TToken>?) ParserExtensions.Parse<TToken, T>(Parser<TToken, T>, IEnumerator<TToken>, IConfiguration<TToken>?) ParserExtensions.Parse<TToken, T>(Parser<TToken, T>, IList<TToken>, IConfiguration<TToken>?) ParserExtensions.Parse<TToken, T>(Parser<TToken, T>, ReadOnlySpan<TToken>, IConfiguration<TToken>?) ParserExtensions.Parse<TToken, T>(Parser<TToken, T>, TToken[], IConfiguration<TToken>?)"
  },
  "Pidgin.Parser.html": {
    "href": "Pidgin.Parser.html",
    "title": "Class Parser | Pidgin",
    "keywords": "Class Parser Constructor functions, extension methods and utilities for Parser<TToken, T>. This class is intended to be imported statically (\"using static Pidgin.Parser\"). Inheritance object Parser Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class Parser Properties DecimalNum A parser which parses a base-10 integer with an optional sign. The resulting int is not checked for overflow. Declaration public static Parser<char, int> DecimalNum { get; } Property Value Type Description Parser<char, int> A parser which parses a base-10 integer with an optional sign. Digit A parser that parses and returns a single digit character (0-9). Declaration public static Parser<char, char> Digit { get; } Property Value Type Description Parser<char, char> A parser that parses and returns a single digit character. EndOfLine A parser that parses and returns either the literal string \"\\r\\n\" or the literal string \"\\n\". Declaration public static Parser<char, string> EndOfLine { get; } Property Value Type Description Parser<char, string> HexNum A parser which parses a base-16 (hexadecimal) integer with an optional sign. The resulting int is not checked for overflow. Declaration public static Parser<char, int> HexNum { get; } Property Value Type Description Parser<char, int> A parser which parses a base-16 (hexadecimal) integer with an optional sign. Letter A parser that parses and returns a single letter character. Declaration public static Parser<char, char> Letter { get; } Property Value Type Description Parser<char, char> LetterOrDigit A parser that parses and returns a single letter or digit character. Declaration public static Parser<char, char> LetterOrDigit { get; } Property Value Type Description Parser<char, char> LongNum A parser which parses a base-10 long integer with an optional sign. Declaration public static Parser<char, long> LongNum { get; } Property Value Type Description Parser<char, long> Lowercase A parser that parses and returns a single lowercase letter character. Declaration public static Parser<char, char> Lowercase { get; } Property Value Type Description Parser<char, char> Num A parser which parses a base-10 integer with an optional sign. The resulting int is not checked for overflow. Declaration public static Parser<char, int> Num { get; } Property Value Type Description Parser<char, int> A parser which parses a base-10 integer with an optional sign. OctalNum A parser which parses a base-8 (octal) integer with an optional sign. The resulting int is not checked for overflow. Declaration public static Parser<char, int> OctalNum { get; } Property Value Type Description Parser<char, int> A parser which parses a base-8 (octal) integer with an optional sign. Punctuation A parser that parses and returns a single Unicode punctuation character. Declaration public static Parser<char, char> Punctuation { get; } Property Value Type Description Parser<char, char> Real A parser which parses a floating point number with an optional sign. Declaration public static Parser<char, double> Real { get; } Property Value Type Description Parser<char, double> Separator A parser that parses and returns a single Unicode separator character. Declaration public static Parser<char, char> Separator { get; } Property Value Type Description Parser<char, char> SkipWhitespaces A parser that discards a sequence of whitespace characters. Declaration public static Parser<char, Unit> SkipWhitespaces { get; } Property Value Type Description Parser<char, Unit> Symbol A parser that parses and returns a single Unicode symbol character. Declaration public static Parser<char, char> Symbol { get; } Property Value Type Description Parser<char, char> Uppercase A parser that parses and returns a single uppercase letter character. Declaration public static Parser<char, char> Uppercase { get; } Property Value Type Description Parser<char, char> Whitespace A parser that parses and returns a single whitespace character. Declaration public static Parser<char, char> Whitespace { get; } Property Value Type Description Parser<char, char> WhitespaceString A parser that parses and returns a sequence of whitespace characters packed into a string. Declaration public static Parser<char, string> WhitespaceString { get; } Property Value Type Description Parser<char, string> Whitespaces A parser that parses and returns a sequence of whitespace characters. Declaration public static Parser<char, IEnumerable<char>> Whitespaces { get; } Property Value Type Description Parser<char, IEnumerable<char>> Methods AnyCharExcept(params char[]) Creates a parser which parses and returns a character if it is not one of the specified characters. When the character is one of the given characters, the parser fails without consuming input. Declaration public static Parser<char, char> AnyCharExcept(params char[] chars) Parameters Type Name Description char[] chars A sequence of characters that should not be matched. Returns Type Description Parser<char, char> A parser which parses and returns a character that does not match one of the specified characters. AnyCharExcept(IEnumerable<char>) Creates a parser which parses and returns a character if it is not one of the specified characters. When the character is one of the given characters, the parser fails without consuming input. Declaration public static Parser<char, char> AnyCharExcept(IEnumerable<char> chars) Parameters Type Name Description IEnumerable<char> chars A sequence of characters that should not be matched. Returns Type Description Parser<char, char> A parser which parses and returns a character that does not match one of the specified characters. AtLeastOnceString<TToken>(Parser<TToken, char>) Creates a parser which applies the current parser one or more times, packing the resulting characters into a string. Equivalent to parser.AtLeastOnce().Select(cs => string.Concat(cs)). Declaration public static Parser<TToken, string> AtLeastOnceString<TToken>(this Parser<TToken, char> parser) Parameters Type Name Description Parser<TToken, char> parser A parser returning a single character. Returns Type Description Parser<TToken, string> A parser which applies the current parser one or more times, packing the resulting characters into a string. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. AtLeastOnceString<TToken>(Parser<TToken, string>) Creates a parser which applies the current parser one or more times, concatenating the resulting string pieces. Equivalent to parser.Many().Select(cs => string.Concat(cs)). Declaration public static Parser<TToken, string> AtLeastOnceString<TToken>(this Parser<TToken, string> parser) Parameters Type Name Description Parser<TToken, string> parser A parser returning a single character. Returns Type Description Parser<TToken, string> A parser which applies the current parser one or more times, concatenating the resulting string pieces. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. CIChar(char) Creates a parser which parses and returns a single character, in a case insensitive manner. The parser returns the actual character parsed. Declaration public static Parser<char, char> CIChar(char character) Parameters Type Name Description char character The character to parse. Returns Type Description Parser<char, char> A parser which parses and returns a single character. CIEnum<TEnum>() Creates a parser that parses and returns one of enum values, in a case insensitive manner. Declaration public static Parser<char, TEnum> CIEnum<TEnum>() where TEnum : struct, Enum Returns Type Description Parser<char, TEnum> A parser that parses and returns one of enum values. Type Parameters Name Description TEnum Enum type. CIOneOf(params char[]) Creates a parser which parses and returns one of the specified characters, in a case insensitive manner. The parser returns the actual character parsed. Declaration public static Parser<char, char> CIOneOf(params char[] chars) Parameters Type Name Description char[] chars A sequence of characters to choose between. Returns Type Description Parser<char, char> A parser which parses and returns one of the specified characters, in a case insensitive manner. CIOneOf(IEnumerable<char>) Creates a parser which parses and returns one of the specified characters, in a case insensitive manner. The parser returns the actual character parsed. Declaration public static Parser<char, char> CIOneOf(IEnumerable<char> chars) Parameters Type Name Description IEnumerable<char> chars A sequence of characters to choose between. Returns Type Description Parser<char, char> A parser which parses and returns one of the specified characters, in a case insensitive manner. CIString(string) Creates a parser that parses and returns a literal string, in a case insensitive manner. The parser returns the actual string parsed. Declaration public static Parser<char, string> CIString(string str) Parameters Type Name Description string str The string to parse. Returns Type Description Parser<char, string> A parser that parses and returns a literal string, in a case insensitive manner. Char(char) Creates a parser which parses and returns a single character. Declaration public static Parser<char, char> Char(char character) Parameters Type Name Description char character The character to parse. Returns Type Description Parser<char, char> A parser which parses and returns a single character. Enum<TEnum>() Creates a parser that parses and returns one of enum values. Declaration public static Parser<char, TEnum> Enum<TEnum>() where TEnum : struct, Enum Returns Type Description Parser<char, TEnum> A parser that parses and returns one of enum values. Type Parameters Name Description TEnum Enum type. Int(int) A parser which parses an integer in the given base with an optional sign. The resulting int is not checked for overflow. Declaration public static Parser<char, int> Int(int @base) Parameters Type Name Description int base The base in which the number is notated, between 1 and 36. Returns Type Description Parser<char, int> A parser which parses an integer with an optional sign. Long(int) Creates a parser which parses a long integer in the given base with an optional sign. The resulting long is not checked for overflow. Declaration public static Parser<char, long> Long(int @base) Parameters Type Name Description int base The base in which the number is notated, between 1 and 36. Returns Type Description Parser<char, long> A parser which parses a long integer with an optional sign. Lookahead<TToken, T>(Parser<TToken, T>) If parser succeeds, Lookahead(parser) backtracks, behaving as if parser had not consumed any input. No backtracking is performed upon failure. Declaration public static Parser<TToken, T> Lookahead<TToken, T>(Parser<TToken, T> parser) Parameters Type Name Description Parser<TToken, T> parser The parser to look ahead with. Returns Type Description Parser<TToken, T> A parser which rewinds the input stream if parser succeeds. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. ManyString<TToken>(Parser<TToken, char>) Creates a parser which applies the current parser zero or more times, packing the resulting characters into a string. Equivalent to parser.Many().Select(cs => string.Concat(cs)). Declaration public static Parser<TToken, string> ManyString<TToken>(this Parser<TToken, char> parser) Parameters Type Name Description Parser<TToken, char> parser A parser returning a single character. Returns Type Description Parser<TToken, string> A parser which applies the current parser zero or more times, packing the resulting characters into a string. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. ManyString<TToken>(Parser<TToken, string>) Creates a parser which applies the current parser zero or more times, concatenating the resulting string pieces. Equivalent to parser.AtLeastOnce().Select(cs => string.Concat(cs)). Declaration public static Parser<TToken, string> ManyString<TToken>(this Parser<TToken, string> parser) Parameters Type Name Description Parser<TToken, string> parser A parser returning a single character. Returns Type Description Parser<TToken, string> A parser which applies the current parser zero or more times, concatenating the resulting string pieces. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. Map<TToken, T1, T2, T3, T4, T5, T6, T7, T8, R>(Func<T1, T2, T3, T4, T5, T6, T7, T8, R>, Parser<TToken, T1>, Parser<TToken, T2>, Parser<TToken, T3>, Parser<TToken, T4>, Parser<TToken, T5>, Parser<TToken, T6>, Parser<TToken, T7>, Parser<TToken, T8>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, T2, T3, T4, T5, T6, T7, T8, R>(Func<T1, T2, T3, T4, T5, T6, T7, T8, R> func, Parser<TToken, T1> parser1, Parser<TToken, T2> parser2, Parser<TToken, T3> parser3, Parser<TToken, T4> parser4, Parser<TToken, T5> parser5, Parser<TToken, T6> parser6, Parser<TToken, T7> parser7, Parser<TToken, T8> parser8) Parameters Type Name Description Func<T1, T2, T3, T4, T5, T6, T7, T8, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Parser<TToken, T2> parser2 The second parser Parser<TToken, T3> parser3 The third parser Parser<TToken, T4> parser4 The fourth parser Parser<TToken, T5> parser5 The fifth parser Parser<TToken, T6> parser6 The sixth parser Parser<TToken, T7> parser7 The seventh parser Parser<TToken, T8> parser8 The eighth parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser T2 The return type of the second parser T3 The return type of the third parser T4 The return type of the fourth parser T5 The return type of the fifth parser T6 The return type of the sixth parser T7 The return type of the seventh parser T8 The return type of the eighth parser R The return type of the resulting parser Map<TToken, T1, R>(Func<T1, R>, Parser<TToken, T1>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, R>(Func<T1, R> func, Parser<TToken, T1> parser1) Parameters Type Name Description Func<T1, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser R The return type of the resulting parser Map<TToken, T1, T2, R>(Func<T1, T2, R>, Parser<TToken, T1>, Parser<TToken, T2>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, T2, R>(Func<T1, T2, R> func, Parser<TToken, T1> parser1, Parser<TToken, T2> parser2) Parameters Type Name Description Func<T1, T2, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Parser<TToken, T2> parser2 The second parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser T2 The return type of the second parser R The return type of the resulting parser Map<TToken, T1, T2, T3, R>(Func<T1, T2, T3, R>, Parser<TToken, T1>, Parser<TToken, T2>, Parser<TToken, T3>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, T2, T3, R>(Func<T1, T2, T3, R> func, Parser<TToken, T1> parser1, Parser<TToken, T2> parser2, Parser<TToken, T3> parser3) Parameters Type Name Description Func<T1, T2, T3, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Parser<TToken, T2> parser2 The second parser Parser<TToken, T3> parser3 The third parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser T2 The return type of the second parser T3 The return type of the third parser R The return type of the resulting parser Map<TToken, T1, T2, T3, T4, R>(Func<T1, T2, T3, T4, R>, Parser<TToken, T1>, Parser<TToken, T2>, Parser<TToken, T3>, Parser<TToken, T4>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, T2, T3, T4, R>(Func<T1, T2, T3, T4, R> func, Parser<TToken, T1> parser1, Parser<TToken, T2> parser2, Parser<TToken, T3> parser3, Parser<TToken, T4> parser4) Parameters Type Name Description Func<T1, T2, T3, T4, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Parser<TToken, T2> parser2 The second parser Parser<TToken, T3> parser3 The third parser Parser<TToken, T4> parser4 The fourth parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser T2 The return type of the second parser T3 The return type of the third parser T4 The return type of the fourth parser R The return type of the resulting parser Map<TToken, T1, T2, T3, T4, T5, R>(Func<T1, T2, T3, T4, T5, R>, Parser<TToken, T1>, Parser<TToken, T2>, Parser<TToken, T3>, Parser<TToken, T4>, Parser<TToken, T5>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, T2, T3, T4, T5, R>(Func<T1, T2, T3, T4, T5, R> func, Parser<TToken, T1> parser1, Parser<TToken, T2> parser2, Parser<TToken, T3> parser3, Parser<TToken, T4> parser4, Parser<TToken, T5> parser5) Parameters Type Name Description Func<T1, T2, T3, T4, T5, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Parser<TToken, T2> parser2 The second parser Parser<TToken, T3> parser3 The third parser Parser<TToken, T4> parser4 The fourth parser Parser<TToken, T5> parser5 The fifth parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser T2 The return type of the second parser T3 The return type of the third parser T4 The return type of the fourth parser T5 The return type of the fifth parser R The return type of the resulting parser Map<TToken, T1, T2, T3, T4, T5, T6, R>(Func<T1, T2, T3, T4, T5, T6, R>, Parser<TToken, T1>, Parser<TToken, T2>, Parser<TToken, T3>, Parser<TToken, T4>, Parser<TToken, T5>, Parser<TToken, T6>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, T2, T3, T4, T5, T6, R>(Func<T1, T2, T3, T4, T5, T6, R> func, Parser<TToken, T1> parser1, Parser<TToken, T2> parser2, Parser<TToken, T3> parser3, Parser<TToken, T4> parser4, Parser<TToken, T5> parser5, Parser<TToken, T6> parser6) Parameters Type Name Description Func<T1, T2, T3, T4, T5, T6, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Parser<TToken, T2> parser2 The second parser Parser<TToken, T3> parser3 The third parser Parser<TToken, T4> parser4 The fourth parser Parser<TToken, T5> parser5 The fifth parser Parser<TToken, T6> parser6 The sixth parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser T2 The return type of the second parser T3 The return type of the third parser T4 The return type of the fourth parser T5 The return type of the fifth parser T6 The return type of the sixth parser R The return type of the resulting parser Map<TToken, T1, T2, T3, T4, T5, T6, T7, R>(Func<T1, T2, T3, T4, T5, T6, T7, R>, Parser<TToken, T1>, Parser<TToken, T2>, Parser<TToken, T3>, Parser<TToken, T4>, Parser<TToken, T5>, Parser<TToken, T6>, Parser<TToken, T7>) Creates a parser that applies the specified parsers sequentially and applies the specified transformation function to their results. Declaration public static Parser<TToken, R> Map<TToken, T1, T2, T3, T4, T5, T6, T7, R>(Func<T1, T2, T3, T4, T5, T6, T7, R> func, Parser<TToken, T1> parser1, Parser<TToken, T2> parser2, Parser<TToken, T3> parser3, Parser<TToken, T4> parser4, Parser<TToken, T5> parser5, Parser<TToken, T6> parser6, Parser<TToken, T7> parser7) Parameters Type Name Description Func<T1, T2, T3, T4, T5, T6, T7, R> func A function to apply to the return values of the specified parsers Parser<TToken, T1> parser1 The first parser Parser<TToken, T2> parser2 The second parser Parser<TToken, T3> parser3 The third parser Parser<TToken, T4> parser4 The fourth parser Parser<TToken, T5> parser5 The fifth parser Parser<TToken, T6> parser6 The sixth parser Parser<TToken, T7> parser7 The seventh parser Returns Type Description Parser<TToken, R> Type Parameters Name Description TToken The type of tokens in the parser's input stream T1 The return type of the first parser T2 The return type of the second parser T3 The return type of the third parser T4 The return type of the fourth parser T5 The return type of the fifth parser T6 The return type of the sixth parser T7 The return type of the seventh parser R The return type of the resulting parser Not<TToken, T>(Parser<TToken, T>) Creates a parser which succeeds only if the given parser fails. The resulting parser does not perform any backtracking; it consumes the same amount of input as the supplied parser. Combine this function with Try<TToken, T>(Parser<TToken, T>) if this behaviour is undesirable. Declaration public static Parser<TToken, Unit> Not<TToken, T>(Parser<TToken, T> parser) Parameters Type Name Description Parser<TToken, T> parser The parser that is expected to fail. Returns Type Description Parser<TToken, Unit> A parser which succeeds only if the given parser fails. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. OneOf(params char[]) Creates a parser which parses and returns one of the specified characters. Declaration public static Parser<char, char> OneOf(params char[] chars) Parameters Type Name Description char[] chars A sequence of characters to choose between. Returns Type Description Parser<char, char> A parser which parses and returns one of the specified characters. OneOf(IEnumerable<char>) Creates a parser which parses and returns one of the specified characters. Declaration public static Parser<char, char> OneOf(IEnumerable<char> chars) Parameters Type Name Description IEnumerable<char> chars A sequence of characters to choose between. Returns Type Description Parser<char, char> A parser which parses and returns one of the specified characters. OneOf<TToken, T>(params Parser<TToken, T>[]) Creates a parser which applies one of the specified parsers. The resulting parser fails if all of the input parsers fail without consuming input, or if one of them fails after consuming input. Declaration public static Parser<TToken, T> OneOf<TToken, T>(params Parser<TToken, T>[] parsers) Parameters Type Name Description Parser<TToken, T>[] parsers A sequence of parsers to choose between. Returns Type Description Parser<TToken, T> A parser which applies one of the specified parsers. Type Parameters Name Description TToken The type of tokens in the parsers' input stream. T The return type of the parsers. OneOf<TToken, T>(IEnumerable<Parser<TToken, T>>) Creates a parser which applies one of the specified parsers. The resulting parser fails if all of the input parsers fail without consuming input, or if one of them fails after consuming input. The input enumerable is enumerated and copied to a list. Declaration public static Parser<TToken, T> OneOf<TToken, T>(IEnumerable<Parser<TToken, T>> parsers) Parameters Type Name Description IEnumerable<Parser<TToken, T>> parsers A sequence of parsers to choose between. Returns Type Description Parser<TToken, T> A parser which applies one of the specified parsers. Type Parameters Name Description TToken The type of tokens in the parsers' input stream. T The return type of the parsers. Rec<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>>) Creates a parser which passes itself to the supplied function and applies the resulting parser. This is the Y combinator for parsers. Rec<TToken, T>(Lazy<Parser<TToken, T>>)Rec<TToken, T>(Func<Parser<TToken, T>>) Declaration public static Parser<TToken, T> Rec<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>> func) Parameters Type Name Description Func<Parser<TToken, T>, Parser<TToken, T>> func A function whose argument is a parser which behaves the same way as its result. Returns Type Description Parser<TToken, T> A parser which lazily calls the supplied function and applies the resulting parser. Type Parameters Name Description TToken The type of tokens in the parser's input stream. T The return type of the parser. Examples This example shows how to use mutual recursion to create a parser equivalent to Many(). // many is equivalent to String(\"foo\").Separated(Char(' ')) var many = Rec(self => String(\"foo\").Then( Char(' ').Then(self).Optional(), (x, y) => x + y.GetValueOrDefault(\"\") ) ); Rec<TToken, T>(Func<Parser<TToken, T>>) Creates a parser which lazily calls the supplied function and applies the resulting parser. This is primarily useful to allow mutual recursion in parsers. Rec<TToken, T>(Lazy<Parser<TToken, T>>)Rec<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>>) Declaration public static Parser<TToken, T> Rec<TToken, T>(Func<Parser<TToken, T>> parser) Parameters Type Name Description Func<Parser<TToken, T>> parser A function which returns a parser. Returns Type Description Parser<TToken, T> A parser which lazily calls the supplied function and applies the resulting parser. Type Parameters Name Description TToken The type of tokens in the parser's input stream. T The return type of the parser. Examples This example shows how to use mutual recursion to create a parser equivalent to Many(). // many is equivalent to String(\"foo\").Separated(Char(' ')) Parser<char, string> rest = null; var many = String(\"foo\").Then(Rec(() => rest).Optional(), (x, y) => x + y.GetValueOrDefault(\"\")); rest = Char(' ').Then(many); Rec<TToken, T>(Lazy<Parser<TToken, T>>) Creates a parser which lazily calls the supplied function and applies the resulting parser. This is primarily useful to allow mutual recursion in parsers. Rec<TToken, T>(Func<Parser<TToken, T>>)Rec<TToken, T>(Func<Parser<TToken, T>, Parser<TToken, T>>) Declaration public static Parser<TToken, T> Rec<TToken, T>(Lazy<Parser<TToken, T>> parser) Parameters Type Name Description Lazy<Parser<TToken, T>> parser A lazy parser value. Returns Type Description Parser<TToken, T> A parser which lazily applies the specified parser. Type Parameters Name Description TToken The type of tokens in the parser's input stream. T The return type of the parser. RepeatString<TToken>(Parser<TToken, char>, int) Creates a parser which applies parsercount times, packing the resulting chars into a string. Equivalent to parser.Repeat(count).Select(string.Concat). Declaration public static Parser<TToken, string> RepeatString<TToken>(this Parser<TToken, char> parser, int count) Parameters Type Name Description Parser<TToken, char> parser The parser. int count The number of times to apply the parser. Returns Type Description Parser<TToken, string> A parser which applies parsercount times, packing the resulting chars into a string. Type Parameters Name Description TToken The type of tokens in the parser's input stream. Exceptions Type Condition ArgumentOutOfRangeException count was less than 0. String(string) Creates a parser that parses and returns a literal string. Declaration public static Parser<char, string> String(string str) Parameters Type Name Description string str The string to parse. Returns Type Description Parser<char, string> A parser that parses and returns a literal string. Try<TToken, T>(Parser<TToken, T>) Creates a parser which applies parser and backtracks upon failure. Declaration public static Parser<TToken, T> Try<TToken, T>(Parser<TToken, T> parser) Parameters Type Name Description Parser<TToken, T> parser The parser. Returns Type Description Parser<TToken, T> A parser which applies parser and backtracks upon failure. Type Parameters Name Description TToken The type of tokens in the parser's input stream. T The return type of the parser. UnsignedInt(int) A parser which parses an integer in the given base without a sign. The resulting int is not checked for overflow. Declaration public static Parser<char, int> UnsignedInt(int @base) Parameters Type Name Description int base The base in which the number is notated, between 1 and 36. Returns Type Description Parser<char, int> A parser which parses an integer without a sign. UnsignedLong(int) A parser which parses a long integer in the given base without a sign. The resulting long is not checked for overflow. Declaration public static Parser<char, long> UnsignedLong(int @base) Parameters Type Name Description int base The base in which the number is notated, between 1 and 36. Returns Type Description Parser<char, long> A parser which parses a long integer without a sign."
  },
  "Pidgin.ParserExtensions.html": {
    "href": "Pidgin.ParserExtensions.html",
    "title": "Class ParserExtensions | Pidgin",
    "keywords": "Class ParserExtensions Extension methods for running parsers. Inheritance object ParserExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class ParserExtensions Methods ParseOrThrow<T>(Parser<byte, T>, Stream, IConfiguration<byte>?) Applies parser to input. Declaration public static T ParseOrThrow<T>(this Parser<byte, T> parser, Stream input, IConfiguration<byte>? configuration = null) Parameters Type Name Description Parser<byte, T> parser A parser. Stream input An input stream. IConfiguration<byte> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<T>(Parser<char, T>, TextReader, IConfiguration<char>?) Applies parser to input. Declaration public static T ParseOrThrow<T>(this Parser<char, T> parser, TextReader input, IConfiguration<char>? configuration = null) Parameters Type Name Description Parser<char, T> parser A parser. TextReader input An input reader. IConfiguration<char> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<T>(Parser<char, T>, string, IConfiguration<char>?) Applies parser to input. Declaration public static T ParseOrThrow<T>(this Parser<char, T> parser, string input, IConfiguration<char>? configuration = null) Parameters Type Name Description Parser<char, T> parser A parser. string input An input string. IConfiguration<char> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<TToken, T>(Parser<TToken, T>, ITokenStream<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static T ParseOrThrow<TToken, T>(this Parser<TToken, T> parser, ITokenStream<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. ITokenStream<TToken> input An input ITokenStream<TToken>. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<TToken, T>(Parser<TToken, T>, IEnumerable<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static T ParseOrThrow<TToken, T>(this Parser<TToken, T> parser, IEnumerable<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IEnumerable<TToken> input An input enumerable. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<TToken, T>(Parser<TToken, T>, IEnumerator<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static T ParseOrThrow<TToken, T>(this Parser<TToken, T> parser, IEnumerator<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IEnumerator<TToken> input An input enumerator. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<TToken, T>(Parser<TToken, T>, IList<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static T ParseOrThrow<TToken, T>(this Parser<TToken, T> parser, IList<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IList<TToken> input An input list. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<TToken, T>(Parser<TToken, T>, ReadOnlySpan<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static T ParseOrThrow<TToken, T>(this Parser<TToken, T> parser, ReadOnlySpan<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. ReadOnlySpan<TToken> input An input span. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseOrThrow<TToken, T>(Parser<TToken, T>, TToken[], IConfiguration<TToken>?) Applies parser to input. Declaration public static T ParseOrThrow<TToken, T>(this Parser<TToken, T> parser, TToken[] input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. TToken[] input An input array. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseReadOnlyListOrThrow<TToken, T>(Parser<TToken, T>, IReadOnlyList<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static T ParseReadOnlyListOrThrow<TToken, T>(this Parser<TToken, T> parser, IReadOnlyList<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IReadOnlyList<TToken> input An input list. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description T The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Exceptions Type Condition ParseException Thrown when an error occurs during parsing. ParseReadOnlyList<TToken, T>(Parser<TToken, T>, IReadOnlyList<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static Result<TToken, T> ParseReadOnlyList<TToken, T>(this Parser<TToken, T> parser, IReadOnlyList<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IReadOnlyList<TToken> input An input list. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Parse<T>(Parser<byte, T>, Stream, IConfiguration<byte>?) Applies parser to input. Note that more characters may be consumed from input than were required for parsing. You may need to manually rewind input. Declaration public static Result<byte, T> Parse<T>(this Parser<byte, T> parser, Stream input, IConfiguration<byte>? configuration = null) Parameters Type Name Description Parser<byte, T> parser A parser. Stream input An input stream. IConfiguration<byte> configuration The configuration, or null to use the default configuration. Returns Type Description Result<byte, T> The result of parsing. Type Parameters Name Description T The type of the value returned by the parser. Parse<T>(Parser<char, T>, TextReader, IConfiguration<char>?) Applies parser to input. Declaration public static Result<char, T> Parse<T>(this Parser<char, T> parser, TextReader input, IConfiguration<char>? configuration = null) Parameters Type Name Description Parser<char, T> parser A parser. TextReader input An input reader. IConfiguration<char> configuration The configuration, or null to use the default configuration. Returns Type Description Result<char, T> The result of parsing. Type Parameters Name Description T The type of the value returned by the parser. Parse<T>(Parser<char, T>, string, IConfiguration<char>?) Applies parser to input. Declaration public static Result<char, T> Parse<T>(this Parser<char, T> parser, string input, IConfiguration<char>? configuration = null) Parameters Type Name Description Parser<char, T> parser A parser. string input An input string. IConfiguration<char> configuration The configuration, or null to use the default configuration. Returns Type Description Result<char, T> The result of parsing. Type Parameters Name Description T The type of the value returned by the parser. Parse<TToken, T>(Parser<TToken, T>, ITokenStream<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static Result<TToken, T> Parse<TToken, T>(this Parser<TToken, T> parser, ITokenStream<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. ITokenStream<TToken> input An input ITokenStream<TToken>. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Parse<TToken, T>(Parser<TToken, T>, ref ParseState<TToken>) Run the parser on the input state. WARNING: This API is unstable and subject to change in future versions of the library. Declaration public static Result<TToken, T> Parse<TToken, T>(this Parser<TToken, T> parser, ref ParseState<TToken> state) Parameters Type Name Description Parser<TToken, T> parser A parser. ParseState<TToken> state An input ParseState<TToken>. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Parse<TToken, T>(Parser<TToken, T>, IEnumerable<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static Result<TToken, T> Parse<TToken, T>(this Parser<TToken, T> parser, IEnumerable<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IEnumerable<TToken> input An input enumerable. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Parse<TToken, T>(Parser<TToken, T>, IEnumerator<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static Result<TToken, T> Parse<TToken, T>(this Parser<TToken, T> parser, IEnumerator<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IEnumerator<TToken> input An input enumerator. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Parse<TToken, T>(Parser<TToken, T>, IList<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static Result<TToken, T> Parse<TToken, T>(this Parser<TToken, T> parser, IList<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. IList<TToken> input An input list. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Parse<TToken, T>(Parser<TToken, T>, ReadOnlySpan<TToken>, IConfiguration<TToken>?) Applies parser to input. Declaration public static Result<TToken, T> Parse<TToken, T>(this Parser<TToken, T> parser, ReadOnlySpan<TToken> input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. ReadOnlySpan<TToken> input An input span. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Parse<TToken, T>(Parser<TToken, T>, TToken[], IConfiguration<TToken>?) Applies parser to input. Declaration public static Result<TToken, T> Parse<TToken, T>(this Parser<TToken, T> parser, TToken[] input, IConfiguration<TToken>? configuration = null) Parameters Type Name Description Parser<TToken, T> parser A parser. TToken[] input An input array. IConfiguration<TToken> configuration The configuration, or null to use the default configuration. Returns Type Description Result<TToken, T> The result of parsing. Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser."
  },
  "Pidgin.Permutation.PermutationParser-2.html": {
    "href": "Pidgin.Permutation.PermutationParser-2.html",
    "title": "Class PermutationParser<TToken, T> | Pidgin",
    "keywords": "Class PermutationParser<TToken, T> A permutation parser represents a collection of parsers which can be run in an order-insensitive manner. Declaration modifiers in C# are an example of an order-insensitive grammar. Modifiers can appear in any order: protected internal static readonly int x; means the same as internal readonly protected static int x;. Usage of this class involves calling Add<U>(Parser<TToken, U>) or AddOptional<U>(Parser<TToken, U>, U) to add parsers to the permutation parser, and then calling Build() to create a parser which runs them in an order-insensitive manner and returns the results in a nested tuple. Note that the parsers that are added to the permutation parser must always consume input before succeeding. If a parser succeeds on empty input the permutation parser will not work correctly. If you want to run a parser optionally, use AddOptional<U>(Parser<TToken, U>, U). This class is immutable. Inheritance object PermutationParser<TToken, T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public sealed class PermutationParser<TToken, T> Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Methods AddOptional<U>(Parser<TToken, U>) Adds an optional parser to the collection. The resulting permutation parser will successfully parse a phrase even if parser never succeeds. In that case, Nothing<T>() will be returned. Declaration public PermutationParser<TToken, (T, Maybe<U>)> AddOptional<U>(Parser<TToken, U> parser) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. Returns Type Description PermutationParser<TToken, (T, Maybe<U>)> A new permutation parser representing the current collection of parsers with parser added optionally. Type Parameters Name Description U The return type of the parser to add to the collection. AddOptional<U>(Parser<TToken, U>, Func<U>) Adds an optional parser to the collection. The resulting permutation parser will successfully parse a phrase even if parser never succeeds. In that case, defaultValueFactory will be called to get a value to return. Declaration public PermutationParser<TToken, (T, U)> AddOptional<U>(Parser<TToken, U> parser, Func<U> defaultValueFactory) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. Func<U> defaultValueFactory A factory for a default value to return if parser fails. Returns Type Description PermutationParser<TToken, (T, U)> A new permutation parser representing the current collection of parsers with parser added optionally. Type Parameters Name Description U The return type of the parser to add to the collection. AddOptional<U>(Parser<TToken, U>, U) Adds an optional parser to the collection. The resulting permutation parser will successfully parse a phrase even if parser never succeeds. In that case, defaultValue will be returned. Declaration public PermutationParser<TToken, (T, U)> AddOptional<U>(Parser<TToken, U> parser, U defaultValue) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. U defaultValue A default value to return if parser fails. Returns Type Description PermutationParser<TToken, (T, U)> A new permutation parser representing the current collection of parsers with parser added optionally. Type Parameters Name Description U The return type of the parser to add to the collection. AddOptional<U, R>(Parser<TToken, U>, Func<T, Maybe<U>, R>) Adds an optional parser to the collection. The resulting permutation parser will successfully parse a phrase even if parser never succeeds. In that case, Nothing<T>() will be returned. Declaration public PermutationParser<TToken, R> AddOptional<U, R>(Parser<TToken, U> parser, Func<T, Maybe<U>, R> resultSelector) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. Func<T, Maybe<U>, R> resultSelector A transformation function to apply to the result of the current permutation parser and the result of parser. Returns Type Description PermutationParser<TToken, R> A new permutation parser representing the current collection of parsers with parser added optionally. Type Parameters Name Description U The return type of the parser to add to the collection. R The return type of the resulting permutation parser. AddOptional<U, R>(Parser<TToken, U>, Func<U>, Func<T, U, R>) Adds an optional parser to the collection. The resulting permutation parser will successfully parse a phrase even if parser never succeeds. In that case, defaultValueFactory will be called to get a value to return. Declaration public PermutationParser<TToken, R> AddOptional<U, R>(Parser<TToken, U> parser, Func<U> defaultValueFactory, Func<T, U, R> resultSelector) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. Func<U> defaultValueFactory A factory for a default value to return if parser fails. Func<T, U, R> resultSelector A transformation function to apply to the result of the current permutation parser and the result of parser. Returns Type Description PermutationParser<TToken, R> A new permutation parser representing the current collection of parsers with parser added optionally. Type Parameters Name Description U The return type of the parser to add to the collection. R The return type of the resulting permutation parser. AddOptional<U, R>(Parser<TToken, U>, U, Func<T, U, R>) Adds an optional parser to the collection. The resulting permutation parser will successfully parse a phrase even if parser never succeeds. In that case, defaultValue will be returned. Declaration public PermutationParser<TToken, R> AddOptional<U, R>(Parser<TToken, U> parser, U defaultValue, Func<T, U, R> resultSelector) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. U defaultValue A default value to return if parser fails. Func<T, U, R> resultSelector A transformation function to apply to the result of the current permutation parser and the result of parser. Returns Type Description PermutationParser<TToken, R> A new permutation parser representing the current collection of parsers with parser added optionally. Type Parameters Name Description U The return type of the parser to add to the collection. R The return type of the resulting permutation parser. Add<U>(Parser<TToken, U>) Adds a parser to the collection. Declaration public PermutationParser<TToken, (T, U)> Add<U>(Parser<TToken, U> parser) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. Returns Type Description PermutationParser<TToken, (T, U)> A new permutation parser representing the current collection of parsers with parser added. Type Parameters Name Description U The return type of the parser to add to the collection. Add<U, R>(Parser<TToken, U>, Func<T, U, R>) Adds a parser to the collection. Declaration public PermutationParser<TToken, R> Add<U, R>(Parser<TToken, U> parser, Func<T, U, R> resultSelector) Parameters Type Name Description Parser<TToken, U> parser The parser to add to the collection. Func<T, U, R> resultSelector A transformation function to apply to the result of the current permutation parser and the result of parser. Returns Type Description PermutationParser<TToken, R> A new permutation parser representing the current collection of parsers with parser added. Type Parameters Name Description U The return type of the parser to add to the collection. R The return type of the resulting permutation parser. Build() Creates a Parser<TToken, T> which runs the current collection of parsers in an order-insensitive manner. Declaration public Parser<TToken, T> Build() Returns Type Description Parser<TToken, T> A Parser<TToken, T> which runs the current collection of parsers in an order-insensitive manner."
  },
  "Pidgin.Permutation.PermutationParser.html": {
    "href": "Pidgin.Permutation.PermutationParser.html",
    "title": "Class PermutationParser | Pidgin",
    "keywords": "Class PermutationParser Contains tools for running sequences of parsers in an order-insensitive manner. Inheritance object PermutationParser Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public static class PermutationParser Methods Create<TToken>() Creates an empty instance of PermutationParser<TToken, T>. Declaration public static PermutationParser<TToken, Unit> Create<TToken>() Returns Type Description PermutationParser<TToken, Unit> An empty instance of PermutationParser<TToken, T>. Type Parameters Name Description TToken The type of tokens to be consumed by the permutation parser."
  },
  "Pidgin.Permutation.html": {
    "href": "Pidgin.Permutation.html",
    "title": "Namespace Pidgin.Permutation | Pidgin",
    "keywords": "Namespace Pidgin.Permutation Classes PermutationParser Contains tools for running sequences of parsers in an order-insensitive manner. PermutationParser<TToken, T> A permutation parser represents a collection of parsers which can be run in an order-insensitive manner. Declaration modifiers in C# are an example of an order-insensitive grammar. Modifiers can appear in any order: protected internal static readonly int x; means the same as internal readonly protected static int x;. Usage of this class involves calling Add<U>(Parser<TToken, U>) or AddOptional<U>(Parser<TToken, U>, U) to add parsers to the permutation parser, and then calling Build() to create a parser which runs them in an order-insensitive manner and returns the results in a nested tuple. Note that the parsers that are added to the permutation parser must always consume input before succeeding. If a parser succeeds on empty input the permutation parser will not work correctly. If you want to run a parser optionally, use AddOptional<U>(Parser<TToken, U>, U). This class is immutable."
  },
  "Pidgin.PooledList-1.html": {
    "href": "Pidgin.PooledList-1.html",
    "title": "Struct PooledList<T> | Pidgin",
    "keywords": "Struct PooledList<T> A version of List<T> which uses an array pool. For efficiency, PooledList<T> is implemented as a mutable struct. It's intended to be passed by reference. Implements IDisposable IList<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public struct PooledList<T> : IDisposable, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements of the list. Constructors PooledList(ArrayPool<T>) Creates a PooledList<T> which uses the supplied ArrayPool<T>. Declaration public PooledList(ArrayPool<T> arrayPool) Parameters Type Name Description ArrayPool<T> arrayPool The array pool. Properties Count The number of elements in the list. Declaration public readonly int Count { get; } Property Value Type Description int IsReadOnly Returns false. Declaration public bool IsReadOnly { get; } Property Value Type Description bool False. this[int] Gets or sets the element at index index. Declaration public T this[int index] { get; set; } Parameters Type Name Description int index The index. Property Value Type Description T The element at index index. Methods Add(T) Adds an item to the end of the list. Declaration public void Add(T item) Parameters Type Name Description T item The item to add. AddRange(ICollection<T>) Adds a collection of items to the end of the list. Declaration public void AddRange(ICollection<T> items) Parameters Type Name Description ICollection<T> items The items to add. AddRange(IEnumerable<T>) Adds a collection of items to the end of the list. Declaration public void AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to add. AddRange(ImmutableArray<T>) Adds a collection of items to the end of the list. Declaration public void AddRange(ImmutableArray<T> items) Parameters Type Name Description ImmutableArray<T> items The items to add. AddRange(ReadOnlySpan<T>) Adds a collection of items to the end of the list. Declaration public void AddRange(ReadOnlySpan<T> items) Parameters Type Name Description ReadOnlySpan<T> items The items to add. AsSpan() Returns a Span<T> view of the list. Declaration public Span<T> AsSpan() Returns Type Description Span<T> A Span<T> view of the list. Clear() Empties the list. Declaration public void Clear() Contains(T) Searches for item in the list. Declaration public bool Contains(T item) Parameters Type Name Description T item The item to search for. Returns Type Description bool True if the item is in the list, false if it is not. CopyTo(T[], int) Copies the list into an array. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The destination array to copy the list into. int arrayIndex The starting index in the destination array. Exceptions Type Condition ArgumentNullException array was null. ArgumentOutOfRangeException arrayIndex was less than 0. ArgumentException There was not enough space in the array. Dispose() Returns any allocated memory to the pool. Declaration public void Dispose() IndexOf(T) Searches for item in the list and returns its index. Returns -1 if the item is missing. Declaration public int IndexOf(T item) Parameters Type Name Description T item The item to search for. Returns Type Description int The index of item, or -1 if it is missing. Insert(int, T) Inserts item into the list at index. Declaration public void Insert(int index, T item) Parameters Type Name Description int index The index at which to insert the item. T item The item to insert. Exceptions Type Condition ArgumentOutOfRangeException The index is outside the bounds of the list. Pop() Removes and returns an item from the end of the list. Declaration public T Pop() Returns Type Description T The last item in the list. Exceptions Type Condition InvalidOperationException The list is empty. Remove(T) Searches for item in the list and removes it. Returns false if the item is missing. Declaration public bool Remove(T item) Parameters Type Name Description T item The item to search for. Returns Type Description bool True if the item was removed, false if it was missing. RemoveAt(int) Removes the item at index. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The index from which to remove the item. Exceptions Type Condition ArgumentOutOfRangeException The index is outside the bounds of the list. Implements IDisposable IList<T> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "Pidgin.ReadOnlySpanFunc-3.html": {
    "href": "Pidgin.ReadOnlySpanFunc-3.html",
    "title": "Delegate ReadOnlySpanFunc<T, TParam, TReturn> | Pidgin",
    "keywords": "Delegate ReadOnlySpanFunc<T, TParam, TReturn> A function which computes a result from a ReadOnlySpan<T> and an additional argument. Declaration public delegate TReturn ReadOnlySpanFunc<T, in TParam, out TReturn>(ReadOnlySpan<T> span, TParam param) Type Parameters Name Description T The type of elements of the span. TParam The type of the additional argument. TReturn The type of the result computed by the function. Constructors ReadOnlySpanFunc(object, nint) A function which computes a result from a ReadOnlySpan<T> and an additional argument. Declaration public ReadOnlySpanFunc(object @object, nint method) Parameters Type Name Description object object nint method Methods BeginInvoke(ReadOnlySpan<T>, TParam, AsyncCallback, object) A function which computes a result from a ReadOnlySpan<T> and an additional argument. Declaration public virtual IAsyncResult BeginInvoke(ReadOnlySpan<T> span, TParam param, AsyncCallback callback, object @object) Parameters Type Name Description ReadOnlySpan<T> span TParam param AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) A function which computes a result from a ReadOnlySpan<T> and an additional argument. Declaration public virtual TReturn EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description TReturn Invoke(ReadOnlySpan<T>, TParam) A function which computes a result from a ReadOnlySpan<T> and an additional argument. Declaration public virtual TReturn Invoke(ReadOnlySpan<T> span, TParam param) Parameters Type Name Description ReadOnlySpan<T> span TParam param Returns Type Description TReturn"
  },
  "Pidgin.Result-2.html": {
    "href": "Pidgin.Result-2.html",
    "title": "Class Result<TToken, T> | Pidgin",
    "keywords": "Class Result<TToken, T> Represents the result of parsing. A parse result may be successful (Success == true), in which case it contains a value, or it may be a failure, in which case it contains an error. Inheritance object Result<TToken, T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class Result<TToken, T> Type Parameters Name Description TToken The type of the tokens in the parser's input stream. T The type of the value returned by the parser. Properties Error The parse error. Declaration public ParseError<TToken>? Error { get; } Property Value Type Description ParseError<TToken> Exceptions Type Condition InvalidOperationException Thrown when the result was a successful one. Success Did the parse succeed?. Declaration public bool Success { get; } Property Value Type Description bool A value indicating whether the parse was successful. Value The parser's return value. Declaration public T Value { get; } Property Value Type Description T Exceptions Type Condition InvalidOperationException Thrown when the result was not a successful one. Methods Cast<U>() Cast the value contained in the result to the specified output type. Declaration public Result<TToken, U> Cast<U>() Returns Type Description Result<TToken, U> A result containing this result's value casted to U. Type Parameters Name Description U The type to cast the contained value to. Exceptions Type Condition InvalidCastException Thrown when the contained value is not an instance of U. GetValueOrDefault() Get the value, or return a default value. Declaration public T GetValueOrDefault() Returns Type Description T The value if Success is true, or a default value. GetValueOrDefault(Func<T>) Get the value, or return the result of calling the specified function. Declaration public T GetValueOrDefault(Func<T> value) Parameters Type Name Description Func<T> value A function which computes a default value. Returns Type Description T The value if Success is true, or the result of calling the specified function. GetValueOrDefault(T) Get the value, or return the specified default value. Declaration public T GetValueOrDefault(T @default) Parameters Type Name Description T default The default value. Returns Type Description T The value if Success is true, or the specified default value. Match<U>(Func<T, U>, Func<ParseError<TToken>, U>) Tear down this parse result using a function for the two possible outcomes. If Success == true, success will be called. Otherwise, failure will be called. Declaration public U Match<U>(Func<T, U> success, Func<ParseError<TToken>, U> failure) Parameters Type Name Description Func<T, U> success Called when the result has a value. Func<ParseError<TToken>, U> failure Called when the result does not have a value. Returns Type Description U The result of calling the success or failure function. Type Parameters Name Description U The return type. Or(Result<TToken, T>) Choose the first successful result. Declaration public Result<TToken, T> Or(Result<TToken, T> result) Parameters Type Name Description Result<TToken, T> result A fallback result if this one has an error. Returns Type Description Result<TToken, T> This result, if Success == true, or result. Or(Func<Result<TToken, T>>) Choose the first successful result. Declaration public Result<TToken, T> Or(Func<Result<TToken, T>> result) Parameters Type Name Description Func<Result<TToken, T>> result A fallback result if this one has an error. Returns Type Description Result<TToken, T> This result, if Success == true, or the result of calling result. SelectMany<U>(Func<T, Result<TToken, U>>) Projects the value of the result into a result, and flattens the resulting value into a single result. Declaration public Result<TToken, U> SelectMany<U>(Func<T, Result<TToken, U>> selector) Parameters Type Name Description Func<T, Result<TToken, U>> selector A transformation function to apply to the contained value. Returns Type Description Result<TToken, U> The final result. Type Parameters Name Description U The type of the resulting possibly-absent value. SelectMany<U, R>(Func<T, Result<TToken, U>>, Func<T, U, R>) Projects the value of the result into a result, and flattens the resulting value into a single result, applying a result selector function to the two values. Declaration public Result<TToken, R> SelectMany<U, R>(Func<T, Result<TToken, U>> selector, Func<T, U, R> result) Parameters Type Name Description Func<T, Result<TToken, U>> selector A transformation function to apply to the contained value. Func<T, U, R> result A transformation function to apply to the contained value and the value contained in the selected Maybe<T>. Returns Type Description Result<TToken, R> The result of applying selector to the contained value and result to the intermediate values. Type Parameters Name Description U The type of the value to select. R The type of the resulting possibly-absent value. Select<U>(Func<T, U>) Project the value contained in the result. Declaration public Result<TToken, U> Select<U>(Func<T, U> selector) Parameters Type Name Description Func<T, U> selector A transformation function to apply to the contained value. Returns Type Description Result<TToken, U> The result of applying the transformation function to the contained value. Type Parameters Name Description U The type of the resulting value."
  },
  "Pidgin.SourcePos.html": {
    "href": "Pidgin.SourcePos.html",
    "title": "Struct SourcePos | Pidgin",
    "keywords": "Struct SourcePos Represents a (line, col) position in an input stream. Implements IEquatable<SourcePos> IComparable<SourcePos> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public readonly struct SourcePos : IEquatable<SourcePos>, IComparable<SourcePos> Constructors SourcePos(int, int) Create a new SourcePos with the specified 1-indexed line and column number. Declaration public SourcePos(int line, int col) Parameters Type Name Description int line The 1-indexed line number. int col The 1-indexed column number. Properties Col Gets the column of the position in the input stream The value is 1-indexed: a Col value of 1 refers to the first column of the line. Declaration public int Col { get; } Property Value Type Description int The column. Line Gets the line of the position in the input stream. The value is 1-indexed: a Line value of 1 refers to the first line of the input document. Declaration public int Line { get; } Property Value Type Description int The line. Methods Add(SourcePosDelta) Add a SourcePosDelta to this SourcePos. Declaration public SourcePos Add(SourcePosDelta other) Parameters Type Name Description SourcePosDelta other The SourcePosDelta to add to this SourcePos. Returns Type Description SourcePos A SourcePos representing the composition of this and other. CompareTo(SourcePos) Represents a (line, col) position in an input stream. Declaration public int CompareTo(SourcePos other) Parameters Type Name Description SourcePos other Returns Type Description int Equals(SourcePos) Represents a (line, col) position in an input stream. Declaration public bool Equals(SourcePos other) Parameters Type Name Description SourcePos other Returns Type Description bool Equals(object?) Represents a (line, col) position in an input stream. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Represents a (line, col) position in an input stream. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() IncrementCol() Creates a SourcePos with the column number incremented by one. Declaration public SourcePos IncrementCol() Returns Type Description SourcePos A SourcePos with the column number incremented by one. NewLine() Creates a SourcePos with the line number incremented by one and the column number reset to 1. Declaration public SourcePos NewLine() Returns Type Description SourcePos A SourcePos with the line number incremented by one and the column number reset to 1. Plus(SourcePosDelta) Add a SourcePosDelta to this SourcePos. Declaration public SourcePos Plus(SourcePosDelta other) Parameters Type Name Description SourcePosDelta other The SourcePosDelta to add to this SourcePos. Returns Type Description SourcePos A SourcePos representing the composition of this and other. Operators operator +(SourcePos, SourcePosDelta) Add a SourcePosDelta to this SourcePos. Declaration public static SourcePos operator +(SourcePos left, SourcePosDelta right) Parameters Type Name Description SourcePos left The SourcePos. SourcePosDelta right The SourcePosDelta to add to this SourcePos. Returns Type Description SourcePos A SourcePos representing the composition of left and right. operator ==(SourcePos, SourcePos) Equality operator. Declaration public static bool operator ==(SourcePos left, SourcePos right) Parameters Type Name Description SourcePos left The left SourcePos. SourcePos right The right SourcePos. Returns Type Description bool operator >(SourcePos, SourcePos) Comparison operator. Declaration public static bool operator >(SourcePos left, SourcePos right) Parameters Type Name Description SourcePos left The left SourcePos. SourcePos right The right SourcePos. Returns Type Description bool operator >=(SourcePos, SourcePos) Comparison operator. Declaration public static bool operator >=(SourcePos left, SourcePos right) Parameters Type Name Description SourcePos left The left SourcePos. SourcePos right The right SourcePos. Returns Type Description bool operator !=(SourcePos, SourcePos) Inequality operator. Declaration public static bool operator !=(SourcePos left, SourcePos right) Parameters Type Name Description SourcePos left The left SourcePos. SourcePos right The right SourcePos. Returns Type Description bool operator <(SourcePos, SourcePos) Comparison operator. Declaration public static bool operator <(SourcePos left, SourcePos right) Parameters Type Name Description SourcePos left The left SourcePos. SourcePos right The right SourcePos. Returns Type Description bool operator <=(SourcePos, SourcePos) Comparison operator. Declaration public static bool operator <=(SourcePos left, SourcePos right) Parameters Type Name Description SourcePos left The left SourcePos. SourcePos right The right SourcePos. Returns Type Description bool Implements IEquatable<T> IComparable<T>"
  },
  "Pidgin.SourcePosDelta.html": {
    "href": "Pidgin.SourcePosDelta.html",
    "title": "Struct SourcePosDelta | Pidgin",
    "keywords": "Struct SourcePosDelta Represents a difference in textual lines and columns corresponding to a region of an input stream. Implements IEquatable<SourcePosDelta> IComparable<SourcePosDelta> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Declaration public readonly struct SourcePosDelta : IEquatable<SourcePosDelta>, IComparable<SourcePosDelta> Constructors SourcePosDelta(int, int) Create a new SourcePosDelta with the specified number of lines and columns. Declaration public SourcePosDelta(int lines, int cols) Parameters Type Name Description int lines The number of lines. int cols The number of columns. Properties Cols Gets the number of columns represented by the SourcePosDelta. Declaration public int Cols { get; } Property Value Type Description int The number of columns. Lines Gets the number of lines represented by the SourcePosDelta. Declaration public int Lines { get; } Property Value Type Description int The number of lines. NewLine A SourcePosDelta representing a newline being consumed. Declaration public static SourcePosDelta NewLine { get; } Property Value Type Description SourcePosDelta OneCol A SourcePosDelta representing a single column being consumed. Declaration public static SourcePosDelta OneCol { get; } Property Value Type Description SourcePosDelta Zero A SourcePosDelta representing no change in the source position. Declaration public static SourcePosDelta Zero { get; } Property Value Type Description SourcePosDelta Methods Add(SourcePosDelta) Add two SourcePosDeltas. Declaration public SourcePosDelta Add(SourcePosDelta other) Parameters Type Name Description SourcePosDelta other The SourcePosDelta to add to this one. Returns Type Description SourcePosDelta A SourcePosDelta representing the composition of this and other. CompareTo(SourcePosDelta) Represents a difference in textual lines and columns corresponding to a region of an input stream. Declaration public int CompareTo(SourcePosDelta other) Parameters Type Name Description SourcePosDelta other Returns Type Description int Equals(SourcePosDelta) Represents a difference in textual lines and columns corresponding to a region of an input stream. Declaration public bool Equals(SourcePosDelta other) Parameters Type Name Description SourcePosDelta other Returns Type Description bool Equals(object?) Represents a difference in textual lines and columns corresponding to a region of an input stream. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Represents a difference in textual lines and columns corresponding to a region of an input stream. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Plus(SourcePosDelta) Add two SourcePosDeltas. Declaration public SourcePosDelta Plus(SourcePosDelta other) Parameters Type Name Description SourcePosDelta other The SourcePosDelta to add to this one. Returns Type Description SourcePosDelta A SourcePosDelta representing the composition of this and other. Operators operator +(SourcePosDelta, SourcePosDelta) Add two SourcePosDeltas. Declaration public static SourcePosDelta operator +(SourcePosDelta left, SourcePosDelta right) Parameters Type Name Description SourcePosDelta left The first SourcePosDelta. SourcePosDelta right The SourcePosDelta to add to left. Returns Type Description SourcePosDelta A SourcePosDelta representing the composition of left and right. operator ==(SourcePosDelta, SourcePosDelta) Equality operator. Declaration public static bool operator ==(SourcePosDelta left, SourcePosDelta right) Parameters Type Name Description SourcePosDelta left The left SourcePosDelta. SourcePosDelta right The right SourcePosDelta. Returns Type Description bool operator >(SourcePosDelta, SourcePosDelta) Comparison operator. Declaration public static bool operator >(SourcePosDelta left, SourcePosDelta right) Parameters Type Name Description SourcePosDelta left The left SourcePosDelta. SourcePosDelta right The right SourcePosDelta. Returns Type Description bool operator >=(SourcePosDelta, SourcePosDelta) Comparison operator. Declaration public static bool operator >=(SourcePosDelta left, SourcePosDelta right) Parameters Type Name Description SourcePosDelta left The left SourcePosDelta. SourcePosDelta right The right SourcePosDelta. Returns Type Description bool operator !=(SourcePosDelta, SourcePosDelta) Inequality operator. Declaration public static bool operator !=(SourcePosDelta left, SourcePosDelta right) Parameters Type Name Description SourcePosDelta left The left SourcePosDelta. SourcePosDelta right The right SourcePosDelta. Returns Type Description bool operator <(SourcePosDelta, SourcePosDelta) Comparison operator. Declaration public static bool operator <(SourcePosDelta left, SourcePosDelta right) Parameters Type Name Description SourcePosDelta left The left SourcePosDelta. SourcePosDelta right The right SourcePosDelta. Returns Type Description bool operator <=(SourcePosDelta, SourcePosDelta) Comparison operator. Declaration public static bool operator <=(SourcePosDelta left, SourcePosDelta right) Parameters Type Name Description SourcePosDelta left The left SourcePosDelta. SourcePosDelta right The right SourcePosDelta. Returns Type Description bool Implements IEquatable<T> IComparable<T>"
  },
  "Pidgin.TokenStreams.EnumeratorTokenStream-1.html": {
    "href": "Pidgin.TokenStreams.EnumeratorTokenStream-1.html",
    "title": "Class EnumeratorTokenStream<TToken> | Pidgin",
    "keywords": "Class EnumeratorTokenStream<TToken> An ITokenStream<TToken> implementation based on an IEnumerator<T>. Inheritance object EnumeratorTokenStream<TToken> Implements ITokenStream<TToken> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class EnumeratorTokenStream<TToken> : ITokenStream<TToken> Type Parameters Name Description TToken The type of tokens in the enumerator. Constructors EnumeratorTokenStream(IEnumerator<TToken>) Creates an ITokenStream<TToken> implementation based on an IEnumerator<T>. Declaration public EnumeratorTokenStream(IEnumerator<TToken> input) Parameters Type Name Description IEnumerator<TToken> input The IEnumerator<T>. Properties ChunkSizeHint Returns 16. Declaration public int ChunkSizeHint { get; } Property Value Type Description int Methods Read(Span<TToken>) Read up to buffer.Length tokens into buffer. Return the actual number of tokens read, which may be fewer than the size of the buffer if the stream has reached the end. Declaration public int Read(Span<TToken> buffer) Parameters Type Name Description Span<TToken> buffer The buffer to read tokens into. Returns Type Description int The actual number of tokens read. Implements ITokenStream<TToken>"
  },
  "Pidgin.TokenStreams.ListTokenStream-1.html": {
    "href": "Pidgin.TokenStreams.ListTokenStream-1.html",
    "title": "Class ListTokenStream<TToken> | Pidgin",
    "keywords": "Class ListTokenStream<TToken> An ITokenStream<TToken> implementation based on an IList<T>. Inheritance object ListTokenStream<TToken> Implements ITokenStream<TToken> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public sealed class ListTokenStream<TToken> : ITokenStream<TToken> Type Parameters Name Description TToken The type of tokens in the list. Constructors ListTokenStream(IList<TToken>) Creates an ITokenStream<TToken> implementation based on an IList<T>. Declaration public ListTokenStream(IList<TToken> input) Parameters Type Name Description IList<TToken> input The IList<T>. Properties ChunkSizeHint Returns 16. Declaration public int ChunkSizeHint { get; } Property Value Type Description int Methods Read(Span<TToken>) Read up to buffer.Length tokens into buffer. Return the actual number of tokens read, which may be fewer than the size of the buffer if the stream has reached the end. Declaration public int Read(Span<TToken> buffer) Parameters Type Name Description Span<TToken> buffer The buffer to read tokens into. Returns Type Description int The actual number of tokens read. Implements ITokenStream<TToken>"
  },
  "Pidgin.TokenStreams.ReadOnlyListTokenStream-1.html": {
    "href": "Pidgin.TokenStreams.ReadOnlyListTokenStream-1.html",
    "title": "Class ReadOnlyListTokenStream<TToken> | Pidgin",
    "keywords": "Class ReadOnlyListTokenStream<TToken> An ITokenStream<TToken> implementation based on an IReadOnlyList<T>. Inheritance object ReadOnlyListTokenStream<TToken> Implements ITokenStream<TToken> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public sealed class ReadOnlyListTokenStream<TToken> : ITokenStream<TToken> Type Parameters Name Description TToken The type of tokens in the list. Constructors ReadOnlyListTokenStream(IReadOnlyList<TToken>) Creates an ITokenStream<TToken> implementation based on an IReadOnlyList<T>. Declaration public ReadOnlyListTokenStream(IReadOnlyList<TToken> input) Parameters Type Name Description IReadOnlyList<TToken> input The IReadOnlyList<T>. Properties ChunkSizeHint Returns 16. Declaration public int ChunkSizeHint { get; } Property Value Type Description int Methods Read(Span<TToken>) Read up to buffer.Length tokens into buffer. Return the actual number of tokens read, which may be fewer than the size of the buffer if the stream has reached the end. Declaration public int Read(Span<TToken> buffer) Parameters Type Name Description Span<TToken> buffer The buffer to read tokens into. Returns Type Description int The actual number of tokens read. Implements ITokenStream<TToken>"
  },
  "Pidgin.TokenStreams.ReaderTokenStream.html": {
    "href": "Pidgin.TokenStreams.ReaderTokenStream.html",
    "title": "Class ReaderTokenStream | Pidgin",
    "keywords": "Class ReaderTokenStream An ITokenStream<TToken> implementation based on a TextReader. Inheritance object ReaderTokenStream Implements ITokenStream<char> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class ReaderTokenStream : ITokenStream<char> Constructors ReaderTokenStream(TextReader) Creates an ITokenStream<TToken> implementation based on a TextReader. Declaration public ReaderTokenStream(TextReader input) Parameters Type Name Description TextReader input The TextReader. Properties ChunkSizeHint Returns 4096. Declaration public int ChunkSizeHint { get; } Property Value Type Description int Methods Read(Span<char>) Read up to buffer.Length tokens into buffer. Return the actual number of tokens read, which may be fewer than the size of the buffer if the stream has reached the end. Declaration public int Read(Span<char> buffer) Parameters Type Name Description Span<char> buffer The buffer to read tokens into. Returns Type Description int The actual number of tokens read. Implements ITokenStream<TToken>"
  },
  "Pidgin.TokenStreams.ResumableTokenStream-1.html": {
    "href": "Pidgin.TokenStreams.ResumableTokenStream-1.html",
    "title": "Class ResumableTokenStream<TToken> | Pidgin",
    "keywords": "Class ResumableTokenStream<TToken> An ITokenStream<TToken> implementation which wraps another ITokenStream<TToken> and adds support for resumable parsing. Inheritance object ResumableTokenStream<TToken> Implements ITokenStream<TToken> IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class ResumableTokenStream<TToken> : ITokenStream<TToken>, IDisposable Type Parameters Name Description TToken The type of tokens returned by the wrapped ITokenStream<TToken>. Constructors ResumableTokenStream(ITokenStream<TToken>, ArrayPool<TToken>?) Creates an ITokenStream<TToken> implementation which adds support for resumable parsing to next. Declaration public ResumableTokenStream(ITokenStream<TToken> next, ArrayPool<TToken>? pool = null) Parameters Type Name Description ITokenStream<TToken> next The ITokenStream<TToken> to wrap. ArrayPool<TToken> pool An ArrayPool<T> to use for the internal buffer. Defaults to Shared. Methods Dispose() Return any buffers to the ArrayPool<T>. Declaration public void Dispose() Dispose(bool) Return any buffers to the ArrayPool<T>. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing True if this method is being called by Dispose(). Read(Span<TToken>) Read up to buffer.Length tokens into buffer. Return the actual number of tokens read, which may be fewer than the size of the buffer if the stream has reached the end. Declaration public int Read(Span<TToken> buffer) Parameters Type Name Description Span<TToken> buffer The buffer to read tokens into. Returns Type Description int The actual number of tokens read. Return(ReadOnlySpan<TToken>) Push some un-consumed tokens back into the stream. Parser<TToken, T>s call this method when they are finished parsing. Declaration public void Return(ReadOnlySpan<TToken> leftovers) Parameters Type Name Description ReadOnlySpan<TToken> leftovers The leftovers to push back into the stream. Implements ITokenStream<TToken> IDisposable"
  },
  "Pidgin.TokenStreams.StreamTokenStream.html": {
    "href": "Pidgin.TokenStreams.StreamTokenStream.html",
    "title": "Class StreamTokenStream | Pidgin",
    "keywords": "Class StreamTokenStream An ITokenStream<TToken> implementation based on a Stream. Inheritance object StreamTokenStream Implements ITokenStream<byte> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public class StreamTokenStream : ITokenStream<byte> Constructors StreamTokenStream(Stream) Creates an ITokenStream<TToken> implementation based on a Stream. Declaration public StreamTokenStream(Stream input) Parameters Type Name Description Stream input The Stream. Properties ChunkSizeHint Returns 4096. Declaration public int ChunkSizeHint { get; } Property Value Type Description int Methods Read(Span<byte>) Read up to buffer.Length tokens into buffer. Return the actual number of tokens read, which may be fewer than the size of the buffer if the stream has reached the end. Declaration public int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer The buffer to read tokens into. Returns Type Description int The actual number of tokens read. Implements ITokenStream<TToken>"
  },
  "Pidgin.TokenStreams.html": {
    "href": "Pidgin.TokenStreams.html",
    "title": "Namespace Pidgin.TokenStreams | Pidgin",
    "keywords": "Namespace Pidgin.TokenStreams Classes EnumeratorTokenStream<TToken> An ITokenStream<TToken> implementation based on an IEnumerator<T>. ListTokenStream<TToken> An ITokenStream<TToken> implementation based on an IList<T>. ReadOnlyListTokenStream<TToken> An ITokenStream<TToken> implementation based on an IReadOnlyList<T>. ReaderTokenStream An ITokenStream<TToken> implementation based on a TextReader. ResumableTokenStream<TToken> An ITokenStream<TToken> implementation which wraps another ITokenStream<TToken> and adds support for resumable parsing. StreamTokenStream An ITokenStream<TToken> implementation based on a Stream."
  },
  "Pidgin.Unit.html": {
    "href": "Pidgin.Unit.html",
    "title": "Class Unit | Pidgin",
    "keywords": "Class Unit An uninteresting type with only one value (Value) and no fields. Like void, but valid as a type parameter. Inheritance object Unit Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Declaration public sealed class Unit Properties Value The single unique Unit value. Declaration public static Unit Value { get; } Property Value Type Description Unit"
  },
  "Pidgin.html": {
    "href": "Pidgin.html",
    "title": "Namespace Pidgin | Pidgin",
    "keywords": "Namespace Pidgin Classes Maybe Constructor functions, extension methods and utilities for working with Maybe<T>. ParseError<TToken> Represents an error encountered during parsing. ParseException Thrown when a parse error is encountered during parsing. ParseException<TToken> Thrown when a parse error is encountered during parsing. Parser Constructor functions, extension methods and utilities for Parser<TToken, T>. This class is intended to be imported statically (\"using static Pidgin.Parser\"). ParserExtensions Extension methods for running parsers. Parser<TToken> Constructor functions, extension methods and utilities for Parser<TToken, T> This class is intended to be imported statically, with the type parameter set to the type of tokens in your input stream (\"using static Pidgin.Parser<char>\"). Parser<TToken, T> Represents a parser which consumes a stream of values of type TToken and returns a value of type T. A parser can either succeed, and return a value of type T, or fail and return a ParseError<TToken>. Result<TToken, T> Represents the result of parsing. A parse result may be successful (Success == true), in which case it contains a value, or it may be a failure, in which case it contains an error. Unit An uninteresting type with only one value (Value) and no fields. Like void, but valid as a type parameter. Structs Expected<TToken> Represents a parsing expectation for error reporting. Expected values are either a sequence of expected tokens (in which case Label == null && Tokens != null), a custom-named parser (Label != null && Tokens == null), or the end of the input stream (Label == null && Tokens == null). Maybe<T> Represents a single possibly absent value. Like Nullable but works for reference types as well as value types. ParseState<TToken> Represents the state of a parsing process. Includes functionality managing and buffering the input stream, reporting errors, and computing source positions. For efficiency, this object is implemented as a mutable struct and is intended to be passed by reference. WARNING: This API is unstable and subject to change in future versions of the library. PooledList<T> A version of List<T> which uses an array pool. For efficiency, PooledList<T> is implemented as a mutable struct. It's intended to be passed by reference. SourcePos Represents a (line, col) position in an input stream. SourcePosDelta Represents a difference in textual lines and columns corresponding to a region of an input stream. Interfaces ITokenStream<TToken> An interface for streams of TToken, which can be consumed by Parser<TToken, T>s. Delegates ReadOnlySpanFunc<T, TParam, TReturn> A function which computes a result from a ReadOnlySpan<T> and an additional argument."
  },
  "index.html": {
    "href": "index.html",
    "title": "Page Redirection",
    "keywords": ""
  }
}